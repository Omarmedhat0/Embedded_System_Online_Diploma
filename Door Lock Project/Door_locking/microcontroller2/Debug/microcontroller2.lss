
microcontroller2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002d40  00002dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800186  00800186  00002efa  2**0
                  ALLOC
  3 .stab         00002e50  00000000  00000000  00002efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000180c  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000078ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c254  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_3>
      10:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_6>
      1c:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_7>
      20:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__vector_8>
      24:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <main>
      8a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DcMotor_Init>:
 * Description : Function to initialize the DC Motor 
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_motor_PORT, DC_motor_PIN_1,PIN_OUTPUT); // Setup the first pin of motor direction as output pin
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_motor_PORT, DC_motor_PIN_2,PIN_OUTPUT);// Setup the second pin of motor direction as output pin
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_setupPinDirection>
	// Stop the DC-Motor at the beginning
	GPIO_writePin(DC_motor_PORT, DC_motor_PIN_1, LOGIC_LOW);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
	GPIO_writePin(DC_motor_PORT, DC_motor_PIN_2, LOGIC_LOW);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <DcMotor_Rotate>:
 * Description
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <DcMotor_Rotate+0x6>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	6a 83       	std	Y+2, r22	; 0x02
	//Rotate Clockwise
	if (state==CW)
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	71 f4       	brne	.+28     	; 0xe94 <DcMotor_Rotate+0x30>
	{
		GPIO_writePin(DC_motor_PORT, DC_motor_PIN_1, LOGIC_LOW);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
		GPIO_writePin(DC_motor_PORT, DC_motor_PIN_2, LOGIC_HIGH);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
		PWM_Timer0_Start(speed);
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	0e 94 70 07 	call	0xee0	; 0xee0 <PWM_Timer0_Start>
     e92:	21 c0       	rjmp	.+66     	; 0xed6 <DcMotor_Rotate+0x72>
	}
	//Rotate Anti-Clockwise
	else if(state==A_CW)
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	71 f4       	brne	.+28     	; 0xeb6 <DcMotor_Rotate+0x52>
	{
		GPIO_writePin(DC_motor_PORT, DC_motor_PIN_1, LOGIC_HIGH);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
		GPIO_writePin(DC_motor_PORT, DC_motor_PIN_2, LOGIC_LOW);
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
		PWM_Timer0_Start(speed);
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	0e 94 70 07 	call	0xee0	; 0xee0 <PWM_Timer0_Start>
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <DcMotor_Rotate+0x72>
	}
	// Stop Motor
	else if(state==stop)
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	69 f4       	brne	.+26     	; 0xed6 <DcMotor_Rotate+0x72>
	{
		GPIO_writePin(DC_motor_PORT, DC_motor_PIN_1, LOGIC_LOW);
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
		GPIO_writePin(DC_motor_PORT, DC_motor_PIN_2, LOGIC_LOW);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
		PWM_Timer0_Start(speed);
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	0e 94 70 07 	call	0xee0	; 0xee0 <PWM_Timer0_Start>
	}
	else
	{
		/*  Do Nothing */
	}
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <PWM_Timer0_Start>:
 * 	4. Setup the compare value based on the required input duty cycle
 *	5. Setup the direction for OC0 as output pin through the GPIO driver.
 *	6. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // duty_cycle
     ef0:	e2 e5       	ldi	r30, 0x52	; 82
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	10 82       	st	Z, r1
	OCR0  = ((float)duty_cycle / 100) * 255; // Set Compare Value
     ef6:	0c e5       	ldi	r16, 0x5C	; 92
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	48 ec       	ldi	r20, 0xC8	; 200
     f1a:	52 e4       	ldi	r21, 0x42	; 66
     f1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	53 e4       	ldi	r21, 0x43	; 67
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	f8 01       	movw	r30, r16
     f46:	80 83       	st	Z, r24
	// Setup Oc0 as an output pin
	GPIO_setupPinDirection (PWM_PORT , PWM_PIN ,PIN_OUTPUT );
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	63 e0       	ldi	r22, 0x03	; 3
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01) ;
     f52:	e3 e5       	ldi	r30, 0x53	; 83
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8a e6       	ldi	r24, 0x6A	; 106
     f58:	80 83       	st	Z, r24
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <buzzer_Init>:
/*
 * Description :
 * Initialize the buzzer and configure it's pin by gpio driver
 */
void buzzer_Init(void)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	// Setup pin of buzzer as output Pin
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN_ID, PIN_OUTPUT);
     f6e:	83 e0       	ldi	r24, 0x03	; 3
     f70:	63 e0       	ldi	r22, 0x03	; 3
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_setupPinDirection>
	//Initialize it by Zero at starting
	GPIO_writePin(Buzzer_PORT_ID,Buzzer_PIN_ID,LOGIC_LOW);
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	63 e0       	ldi	r22, 0x03	; 3
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <buzzer_On>:
/*
 * Description :
 * Turn on the buzzer
 */
void buzzer_On(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID,Buzzer_PIN_ID,LOGIC_HIGH);
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	63 e0       	ldi	r22, 0x03	; 3
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <buzzer_Off>:
/*
 * Description :
 * Turn off the buzzer
 */
void buzzer_Off(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID,Buzzer_PIN_ID,LOGIC_LOW);
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	63 e0       	ldi	r22, 0x03	; 3
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	0e 94 9f 09 	call	0x133e	; 0x133e <GPIO_writePin>
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	2b 97       	sbiw	r28, 0x0b	; 11
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
	/* just initialize the I2C(TWI) module inside the MC */
	I2C_ConfigType I2C_configuration = {Fast_Mode ,0x01, _1};
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	98 87       	std	Y+8, r25	; 0x08
     fd2:	8f 83       	std	Y+7, r24	; 0x07
     fd4:	e8 e6       	ldi	r30, 0x68	; 104
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	fa 87       	std	Y+10, r31	; 0x0a
     fda:	e9 87       	std	Y+9, r30	; 0x09
     fdc:	f6 e0       	ldi	r31, 0x06	; 6
     fde:	fb 87       	std	Y+11, r31	; 0x0b
     fe0:	e9 85       	ldd	r30, Y+9	; 0x09
     fe2:	fa 85       	ldd	r31, Y+10	; 0x0a
     fe4:	00 80       	ld	r0, Z
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	9a 87       	std	Y+10, r25	; 0x0a
     fee:	89 87       	std	Y+9, r24	; 0x09
     ff0:	ef 81       	ldd	r30, Y+7	; 0x07
     ff2:	f8 85       	ldd	r31, Y+8	; 0x08
     ff4:	00 82       	st	Z, r0
     ff6:	8f 81       	ldd	r24, Y+7	; 0x07
     ff8:	98 85       	ldd	r25, Y+8	; 0x08
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	98 87       	std	Y+8, r25	; 0x08
     ffe:	8f 83       	std	Y+7, r24	; 0x07
    1000:	9b 85       	ldd	r25, Y+11	; 0x0b
    1002:	91 50       	subi	r25, 0x01	; 1
    1004:	9b 87       	std	Y+11, r25	; 0x0b
    1006:	eb 85       	ldd	r30, Y+11	; 0x0b
    1008:	ee 23       	and	r30, r30
    100a:	51 f7       	brne	.-44     	; 0xfe0 <EEPROM_init+0x28>
	TWI_init(&I2C_configuration);
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <TWI_init>
}
    1014:	2b 96       	adiw	r28, 0x0b	; 11
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <EEPROM_writeByte+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <EEPROM_writeByte+0x8>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1038:	0e 94 57 0c 	call	0x18ae	; 0x18ae <TWI_start>
    if (TWI_getStatus() != TW_START)
    103c:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    1040:	88 30       	cpi	r24, 0x08	; 8
    1042:	11 f0       	breq	.+4      	; 0x1048 <EEPROM_writeByte+0x22>
        return ERROR;
    1044:	1c 82       	std	Y+4, r1	; 0x04
    1046:	28 c0       	rjmp	.+80     	; 0x1098 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	80 70       	andi	r24, 0x00	; 0
    104e:	97 70       	andi	r25, 0x07	; 7
    1050:	88 0f       	add	r24, r24
    1052:	89 2f       	mov	r24, r25
    1054:	88 1f       	adc	r24, r24
    1056:	99 0b       	sbc	r25, r25
    1058:	91 95       	neg	r25
    105a:	80 6a       	ori	r24, 0xA0	; 160
    105c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1060:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    1064:	88 31       	cpi	r24, 0x18	; 24
    1066:	11 f0       	breq	.+4      	; 0x106c <EEPROM_writeByte+0x46>
        return ERROR; 
    1068:	1c 82       	std	Y+4, r1	; 0x04
    106a:	16 c0       	rjmp	.+44     	; 0x1098 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1072:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    1076:	88 32       	cpi	r24, 0x28	; 40
    1078:	11 f0       	breq	.+4      	; 0x107e <EEPROM_writeByte+0x58>
        return ERROR;
    107a:	1c 82       	std	Y+4, r1	; 0x04
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1084:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    1088:	88 32       	cpi	r24, 0x28	; 40
    108a:	11 f0       	breq	.+4      	; 0x1090 <EEPROM_writeByte+0x6a>
        return ERROR;
    108c:	1c 82       	std	Y+4, r1	; 0x04
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1090:	0e 94 67 0c 	call	0x18ce	; 0x18ce <TWI_stop>
	
    return SUCCESS;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	8c 83       	std	Y+4, r24	; 0x04
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <EEPROM_readByte+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <EEPROM_readByte+0x8>
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	7c 83       	std	Y+4, r23	; 0x04
    10bc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    10be:	0e 94 57 0c 	call	0x18ae	; 0x18ae <TWI_start>
    if (TWI_getStatus() != TW_START)
    10c2:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	11 f0       	breq	.+4      	; 0x10ce <EEPROM_readByte+0x26>
        return ERROR;
    10ca:	1d 82       	std	Y+5, r1	; 0x05
    10cc:	44 c0       	rjmp	.+136    	; 0x1156 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	80 70       	andi	r24, 0x00	; 0
    10d4:	97 70       	andi	r25, 0x07	; 7
    10d6:	88 0f       	add	r24, r24
    10d8:	89 2f       	mov	r24, r25
    10da:	88 1f       	adc	r24, r24
    10dc:	99 0b       	sbc	r25, r25
    10de:	91 95       	neg	r25
    10e0:	80 6a       	ori	r24, 0xA0	; 160
    10e2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    10e6:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    10ea:	88 31       	cpi	r24, 0x18	; 24
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <EEPROM_readByte+0x4a>
        return ERROR;
    10ee:	1d 82       	std	Y+5, r1	; 0x05
    10f0:	32 c0       	rjmp	.+100    	; 0x1156 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    10f8:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    10fc:	88 32       	cpi	r24, 0x28	; 40
    10fe:	11 f0       	breq	.+4      	; 0x1104 <EEPROM_readByte+0x5c>
        return ERROR;
    1100:	1d 82       	std	Y+5, r1	; 0x05
    1102:	29 c0       	rjmp	.+82     	; 0x1156 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1104:	0e 94 57 0c 	call	0x18ae	; 0x18ae <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1108:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    110c:	80 31       	cpi	r24, 0x10	; 16
    110e:	11 f0       	breq	.+4      	; 0x1114 <EEPROM_readByte+0x6c>
        return ERROR;
    1110:	1d 82       	std	Y+5, r1	; 0x05
    1112:	21 c0       	rjmp	.+66     	; 0x1156 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	80 70       	andi	r24, 0x00	; 0
    111a:	97 70       	andi	r25, 0x07	; 7
    111c:	88 0f       	add	r24, r24
    111e:	89 2f       	mov	r24, r25
    1120:	88 1f       	adc	r24, r24
    1122:	99 0b       	sbc	r25, r25
    1124:	91 95       	neg	r25
    1126:	81 6a       	ori	r24, 0xA1	; 161
    1128:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    112c:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    1130:	80 34       	cpi	r24, 0x40	; 64
    1132:	11 f0       	breq	.+4      	; 0x1138 <EEPROM_readByte+0x90>
        return ERROR;
    1134:	1d 82       	std	Y+5, r1	; 0x05
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1138:	0e 94 9c 0c 	call	0x1938	; 0x1938 <TWI_readWithNACK>
    113c:	eb 81       	ldd	r30, Y+3	; 0x03
    113e:	fc 81       	ldd	r31, Y+4	; 0x04
    1140:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1142:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_getStatus>
    1146:	88 35       	cpi	r24, 0x58	; 88
    1148:	11 f0       	breq	.+4      	; 0x114e <EEPROM_readByte+0xa6>
        return ERROR;
    114a:	1d 82       	std	Y+5, r1	; 0x05
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    114e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <TWI_stop>
    return SUCCESS;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <GPIO_setupPinDirection+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <GPIO_setupPinDirection+0x8>
    1170:	0f 92       	push	r0
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
    117a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	08 f0       	brcs	.+2      	; 0x1184 <GPIO_setupPinDirection+0x1c>
    1182:	d5 c0       	rjmp	.+426    	; 0x132e <GPIO_setupPinDirection+0x1c6>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	08 f0       	brcs	.+2      	; 0x118c <GPIO_setupPinDirection+0x24>
    118a:	d1 c0       	rjmp	.+418    	; 0x132e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3d 83       	std	Y+5, r19	; 0x05
    1194:	2c 83       	std	Y+4, r18	; 0x04
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <GPIO_setupPinDirection+0x3a>
    11a0:	43 c0       	rjmp	.+134    	; 0x1228 <GPIO_setupPinDirection+0xc0>
    11a2:	2c 81       	ldd	r18, Y+4	; 0x04
    11a4:	3d 81       	ldd	r19, Y+5	; 0x05
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <GPIO_setupPinDirection+0x4e>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <GPIO_setupPinDirection+0x68>
    11b4:	bc c0       	rjmp	.+376    	; 0x132e <GPIO_setupPinDirection+0x1c6>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <GPIO_setupPinDirection+0x5a>
    11c0:	5f c0       	rjmp	.+190    	; 0x1280 <GPIO_setupPinDirection+0x118>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <GPIO_setupPinDirection+0x66>
    11cc:	85 c0       	rjmp	.+266    	; 0x12d8 <GPIO_setupPinDirection+0x170>
    11ce:	af c0       	rjmp	.+350    	; 0x132e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	a1 f4       	brne	.+40     	; 0x11fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11d6:	aa e3       	ldi	r26, 0x3A	; 58
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ea e3       	ldi	r30, 0x3A	; 58
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_setupPinDirection+0x8c>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_setupPinDirection+0x88>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	98 c0       	rjmp	.+304    	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11fe:	aa e3       	ldi	r26, 0x3A	; 58
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ea e3       	ldi	r30, 0x3A	; 58
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_setupPinDirection+0xb4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_setupPinDirection+0xb0>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	83 c0       	rjmp	.+262    	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a1 f4       	brne	.+40     	; 0x1256 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    122e:	a7 e3       	ldi	r26, 0x37	; 55
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e7 e3       	ldi	r30, 0x37	; 55
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_setupPinDirection+0xe4>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_setupPinDirection+0xe0>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	6c c0       	rjmp	.+216    	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1256:	a7 e3       	ldi	r26, 0x37	; 55
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GPIO_setupPinDirection+0x10c>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <GPIO_setupPinDirection+0x108>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	57 c0       	rjmp	.+174    	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	a1 f4       	brne	.+40     	; 0x12ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1286:	a4 e3       	ldi	r26, 0x34	; 52
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_setupPinDirection+0x13c>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_setupPinDirection+0x138>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	40 c0       	rjmp	.+128    	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12ae:	a4 e3       	ldi	r26, 0x34	; 52
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e4 e3       	ldi	r30, 0x34	; 52
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_setupPinDirection+0x164>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_setupPinDirection+0x160>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	2b c0       	rjmp	.+86     	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	a1 f4       	brne	.+40     	; 0x1306 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12de:	a1 e3       	ldi	r26, 0x31	; 49
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e1 e3       	ldi	r30, 0x31	; 49
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_setupPinDirection+0x194>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_setupPinDirection+0x190>
    1300:	84 2b       	or	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	14 c0       	rjmp	.+40     	; 0x132e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1306:	a1 e3       	ldi	r26, 0x31	; 49
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e1 e3       	ldi	r30, 0x31	; 49
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <GPIO_setupPinDirection+0x1bc>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <GPIO_setupPinDirection+0x1b8>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <GPIO_writePin+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <GPIO_writePin+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	6a 83       	std	Y+2, r22	; 0x02
    1350:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	88 30       	cpi	r24, 0x08	; 8
    1356:	08 f0       	brcs	.+2      	; 0x135a <GPIO_writePin+0x1c>
    1358:	d5 c0       	rjmp	.+426    	; 0x1504 <GPIO_writePin+0x1c6>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	84 30       	cpi	r24, 0x04	; 4
    135e:	08 f0       	brcs	.+2      	; 0x1362 <GPIO_writePin+0x24>
    1360:	d1 c0       	rjmp	.+418    	; 0x1504 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3d 83       	std	Y+5, r19	; 0x05
    136a:	2c 83       	std	Y+4, r18	; 0x04
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <GPIO_writePin+0x3a>
    1376:	43 c0       	rjmp	.+134    	; 0x13fe <GPIO_writePin+0xc0>
    1378:	2c 81       	ldd	r18, Y+4	; 0x04
    137a:	3d 81       	ldd	r19, Y+5	; 0x05
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	2c f4       	brge	.+10     	; 0x138c <GPIO_writePin+0x4e>
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	71 f0       	breq	.+28     	; 0x13a6 <GPIO_writePin+0x68>
    138a:	bc c0       	rjmp	.+376    	; 0x1504 <GPIO_writePin+0x1c6>
    138c:	2c 81       	ldd	r18, Y+4	; 0x04
    138e:	3d 81       	ldd	r19, Y+5	; 0x05
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <GPIO_writePin+0x5a>
    1396:	5f c0       	rjmp	.+190    	; 0x1456 <GPIO_writePin+0x118>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <GPIO_writePin+0x66>
    13a2:	85 c0       	rjmp	.+266    	; 0x14ae <GPIO_writePin+0x170>
    13a4:	af c0       	rjmp	.+350    	; 0x1504 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	a1 f4       	brne	.+40     	; 0x13d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13ac:	ab e3       	ldi	r26, 0x3B	; 59
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_writePin+0x8c>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_writePin+0x88>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	98 c0       	rjmp	.+304    	; 0x1504 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13d4:	ab e3       	ldi	r26, 0x3B	; 59
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	eb e3       	ldi	r30, 0x3B	; 59
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_writePin+0xb4>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_writePin+0xb0>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	83 c0       	rjmp	.+262    	; 0x1504 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	a1 f4       	brne	.+40     	; 0x142c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1404:	a8 e3       	ldi	r26, 0x38	; 56
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e3       	ldi	r30, 0x38	; 56
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_writePin+0xe4>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_writePin+0xe0>
    1426:	84 2b       	or	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	6c c0       	rjmp	.+216    	; 0x1504 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <GPIO_writePin+0x10c>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <GPIO_writePin+0x108>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	57 c0       	rjmp	.+174    	; 0x1504 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	a1 f4       	brne	.+40     	; 0x1484 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_writePin+0x13c>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_writePin+0x138>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	40 c0       	rjmp	.+128    	; 0x1504 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1484:	a5 e3       	ldi	r26, 0x35	; 53
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e3       	ldi	r30, 0x35	; 53
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_writePin+0x164>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_writePin+0x160>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	2b c0       	rjmp	.+86     	; 0x1504 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	a1 f4       	brne	.+40     	; 0x14dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_writePin+0x194>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_writePin+0x190>
    14d6:	84 2b       	or	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14dc:	a2 e3       	ldi	r26, 0x32	; 50
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e2 e3       	ldi	r30, 0x32	; 50
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_writePin+0x1bc>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_writePin+0x1b8>
    14fe:	80 95       	com	r24
    1500:	84 23       	and	r24, r20
    1502:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_readPin+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <GPIO_readPin+0x8>
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1526:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	08 f0       	brcs	.+2      	; 0x1530 <GPIO_readPin+0x1c>
    152e:	84 c0       	rjmp	.+264    	; 0x1638 <GPIO_readPin+0x124>
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	08 f0       	brcs	.+2      	; 0x1538 <GPIO_readPin+0x24>
    1536:	80 c0       	rjmp	.+256    	; 0x1638 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3d 83       	std	Y+5, r19	; 0x05
    1540:	2c 83       	std	Y+4, r18	; 0x04
    1542:	4c 81       	ldd	r20, Y+4	; 0x04
    1544:	5d 81       	ldd	r21, Y+5	; 0x05
    1546:	41 30       	cpi	r20, 0x01	; 1
    1548:	51 05       	cpc	r21, r1
    154a:	79 f1       	breq	.+94     	; 0x15aa <GPIO_readPin+0x96>
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	34 f4       	brge	.+12     	; 0x1562 <GPIO_readPin+0x4e>
    1556:	2c 81       	ldd	r18, Y+4	; 0x04
    1558:	3d 81       	ldd	r19, Y+5	; 0x05
    155a:	21 15       	cp	r18, r1
    155c:	31 05       	cpc	r19, r1
    155e:	69 f0       	breq	.+26     	; 0x157a <GPIO_readPin+0x66>
    1560:	6b c0       	rjmp	.+214    	; 0x1638 <GPIO_readPin+0x124>
    1562:	4c 81       	ldd	r20, Y+4	; 0x04
    1564:	5d 81       	ldd	r21, Y+5	; 0x05
    1566:	42 30       	cpi	r20, 0x02	; 2
    1568:	51 05       	cpc	r21, r1
    156a:	b9 f1       	breq	.+110    	; 0x15da <GPIO_readPin+0xc6>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_readPin+0x64>
    1576:	49 c0       	rjmp	.+146    	; 0x160a <GPIO_readPin+0xf6>
    1578:	5f c0       	rjmp	.+190    	; 0x1638 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    157a:	e9 e3       	ldi	r30, 0x39	; 57
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_readPin+0x7e>
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_readPin+0x7a>
    1596:	ca 01       	movw	r24, r20
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	88 23       	and	r24, r24
    159e:	19 f0       	breq	.+6      	; 0x15a6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	49 c0       	rjmp	.+146    	; 0x1638 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15a6:	19 82       	std	Y+1, r1	; 0x01
    15a8:	47 c0       	rjmp	.+142    	; 0x1638 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15aa:	e6 e3       	ldi	r30, 0x36	; 54
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a9 01       	movw	r20, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_readPin+0xae>
    15be:	55 95       	asr	r21
    15c0:	47 95       	ror	r20
    15c2:	8a 95       	dec	r24
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_readPin+0xaa>
    15c6:	ca 01       	movw	r24, r20
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	88 23       	and	r24, r24
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	31 c0       	rjmp	.+98     	; 0x1638 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	2f c0       	rjmp	.+94     	; 0x1638 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15da:	e3 e3       	ldi	r30, 0x33	; 51
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_readPin+0xde>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_readPin+0xda>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	88 23       	and	r24, r24
    15fe:	19 f0       	breq	.+6      	; 0x1606 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	19 c0       	rjmp	.+50     	; 0x1638 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	17 c0       	rjmp	.+46     	; 0x1638 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    160a:	e0 e3       	ldi	r30, 0x30	; 48
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_readPin+0x10e>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_readPin+0x10a>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	88 23       	and	r24, r24
    162e:	19 f0       	breq	.+6      	; 0x1636 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1636:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1638:	89 81       	ldd	r24, Y+1	; 0x01
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <GPIO_setupPortDirection+0x6>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <GPIO_setupPortDirection+0x8>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	90 f5       	brcc	.+100    	; 0x16c4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	d1 f0       	breq	.+52     	; 0x16a8 <GPIO_setupPortDirection+0x5e>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <GPIO_setupPortDirection+0x3e>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <GPIO_setupPortDirection+0x54>
    1686:	1e c0       	rjmp	.+60     	; 0x16c4 <GPIO_setupPortDirection+0x7a>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	81 f0       	breq	.+32     	; 0x16b2 <GPIO_setupPortDirection+0x68>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <GPIO_setupPortDirection+0x72>
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    169e:	ea e3       	ldi	r30, 0x3A	; 58
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	0e c0       	rjmp	.+28     	; 0x16c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16a8:	e7 e3       	ldi	r30, 0x37	; 55
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16b2:	e4 e3       	ldi	r30, 0x34	; 52
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16bc:	e1 e3       	ldi	r30, 0x31	; 49
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <GPIO_writePort+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <GPIO_writePort+0x8>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	90 f5       	brcc	.+100    	; 0x174c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3c 83       	std	Y+4, r19	; 0x04
    16f0:	2b 83       	std	Y+3, r18	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <GPIO_writePort+0x5e>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <GPIO_writePort+0x3e>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <GPIO_writePort+0x54>
    170e:	1e c0       	rjmp	.+60     	; 0x174c <GPIO_writePort+0x7a>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	81 f0       	breq	.+32     	; 0x173a <GPIO_writePort+0x68>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <GPIO_writePort+0x72>
    1724:	13 c0       	rjmp	.+38     	; 0x174c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1726:	eb e3       	ldi	r30, 0x3B	; 59
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	80 83       	st	Z, r24
    172e:	0e c0       	rjmp	.+28     	; 0x174c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1730:	e8 e3       	ldi	r30, 0x38	; 56
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	09 c0       	rjmp	.+18     	; 0x174c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    173a:	e5 e3       	ldi	r30, 0x35	; 53
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	04 c0       	rjmp	.+8      	; 0x174c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1744:	e2 e3       	ldi	r30, 0x32	; 50
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
			break;
		}
	}
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <GPIO_readPort+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_readPort+0x8>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1768:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	90 f5       	brcc	.+100    	; 0x17d4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3c 83       	std	Y+4, r19	; 0x04
    1778:	2b 83       	std	Y+3, r18	; 0x03
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	91 05       	cpc	r25, r1
    1782:	d1 f0       	breq	.+52     	; 0x17b8 <GPIO_readPort+0x5e>
    1784:	2b 81       	ldd	r18, Y+3	; 0x03
    1786:	3c 81       	ldd	r19, Y+4	; 0x04
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	2c f4       	brge	.+10     	; 0x1798 <GPIO_readPort+0x3e>
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	61 f0       	breq	.+24     	; 0x17ae <GPIO_readPort+0x54>
    1796:	1e c0       	rjmp	.+60     	; 0x17d4 <GPIO_readPort+0x7a>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <GPIO_readPort+0x68>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	83 30       	cpi	r24, 0x03	; 3
    17a8:	91 05       	cpc	r25, r1
    17aa:	81 f0       	breq	.+32     	; 0x17cc <GPIO_readPort+0x72>
    17ac:	13 c0       	rjmp	.+38     	; 0x17d4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17ae:	e9 e3       	ldi	r30, 0x39	; 57
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	0e c0       	rjmp	.+28     	; 0x17d4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17b8:	e6 e3       	ldi	r30, 0x36	; 54
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17c2:	e3 e3       	ldi	r30, 0x33	; 51
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17cc:	e0 e3       	ldi	r30, 0x30	; 48
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <TWI_init>:
 
#include "i2c.h"
#include <avr/io.h>

void TWI_init(const I2C_ConfigType *config_ptr)
{
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <TWI_init+0x12>
    17f6:	0f 92       	push	r0
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	89 83       	std	Y+1, r24	; 0x01
   
    /* Insert the required Bit Rate and pre-scaler with knowledge of F_CPU and calculate TWBT*/
	
	TWSR=(TWSR&0x00)|(config_ptr->TWI_prescaler) ;
    1800:	e1 e2       	ldi	r30, 0x21	; 33
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	a1 e2       	ldi	r26, 0x21	; 33
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	85 81       	ldd	r24, Z+5	; 0x05
    1810:	8c 93       	st	X, r24
    TWBR = (uint8)(((F_CPU/(config_ptr->speed))-16)/(2*(4^(config_ptr->TWI_prescaler))));
    1812:	cc 24       	eor	r12, r12
    1814:	dd 24       	eor	r13, r13
    1816:	68 94       	set
    1818:	c5 f8       	bld	r12, 5
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	42 81       	ldd	r20, Z+2	; 0x02
    1824:	53 81       	ldd	r21, Z+3	; 0x03
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	92 e1       	ldi	r25, 0x12	; 18
    182a:	aa e7       	ldi	r26, 0x7A	; 122
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    1836:	da 01       	movw	r26, r20
    1838:	c9 01       	movw	r24, r18
    183a:	0f 2e       	mov	r0, r31
    183c:	f0 ef       	ldi	r31, 0xF0	; 240
    183e:	ef 2e       	mov	r14, r31
    1840:	ff ef       	ldi	r31, 0xFF	; 255
    1842:	ff 2e       	mov	r15, r31
    1844:	ff ef       	ldi	r31, 0xFF	; 255
    1846:	0f 2f       	mov	r16, r31
    1848:	ff ef       	ldi	r31, 0xFF	; 255
    184a:	1f 2f       	mov	r17, r31
    184c:	f0 2d       	mov	r31, r0
    184e:	e8 0e       	add	r14, r24
    1850:	f9 1e       	adc	r15, r25
    1852:	0a 1f       	adc	r16, r26
    1854:	1b 1f       	adc	r17, r27
    1856:	e9 81       	ldd	r30, Y+1	; 0x01
    1858:	fa 81       	ldd	r31, Y+2	; 0x02
    185a:	95 81       	ldd	r25, Z+5	; 0x05
    185c:	84 e0       	ldi	r24, 0x04	; 4
    185e:	89 27       	eor	r24, r25
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	9c 01       	movw	r18, r24
    186a:	44 27       	eor	r20, r20
    186c:	37 fd       	sbrc	r19, 7
    186e:	40 95       	com	r20
    1870:	54 2f       	mov	r21, r20
    1872:	c8 01       	movw	r24, r16
    1874:	b7 01       	movw	r22, r14
    1876:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    187a:	da 01       	movw	r26, r20
    187c:	c9 01       	movw	r24, r18
    187e:	f6 01       	movw	r30, r12
    1880:	80 83       	st	Z, r24

    /* Insert My slave address */
    TWAR = config_ptr->adrr ; // my address  :) 
    1882:	a2 e2       	ldi	r26, 0x22	; 34
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e9 81       	ldd	r30, Y+1	; 0x01
    1888:	fa 81       	ldd	r31, Y+2	; 0x02
    188a:	84 81       	ldd	r24, Z+4	; 0x04
    188c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    188e:	e6 e5       	ldi	r30, 0x56	; 86
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	80 83       	st	Z, r24
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	08 95       	ret

000018ae <TWI_start>:

void TWI_start(void)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    18b6:	e6 e5       	ldi	r30, 0x56	; 86
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	84 ea       	ldi	r24, 0xA4	; 164
    18bc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18be:	e6 e5       	ldi	r30, 0x56	; 86
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 23       	and	r24, r24
    18c6:	dc f7       	brge	.-10     	; 0x18be <TWI_start+0x10>
}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <TWI_stop>:

void TWI_stop(void)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    18d6:	e6 e5       	ldi	r30, 0x56	; 86
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	84 e9       	ldi	r24, 0x94	; 148
    18dc:	80 83       	st	Z, r24
}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <TWI_write>:

void TWI_write(uint8 data)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	0f 92       	push	r0
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    18f0:	e3 e2       	ldi	r30, 0x23	; 35
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    18f8:	e6 e5       	ldi	r30, 0x56	; 86
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	84 e8       	ldi	r24, 0x84	; 132
    18fe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1900:	e6 e5       	ldi	r30, 0x56	; 86
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	88 23       	and	r24, r24
    1908:	dc f7       	brge	.-10     	; 0x1900 <TWI_write+0x1c>
}
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    191a:	e6 e5       	ldi	r30, 0x56	; 86
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	84 ec       	ldi	r24, 0xC4	; 196
    1920:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1922:	e6 e5       	ldi	r30, 0x56	; 86
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	88 23       	and	r24, r24
    192a:	dc f7       	brge	.-10     	; 0x1922 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    192c:	e3 e2       	ldi	r30, 0x23	; 35
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1940:	e6 e5       	ldi	r30, 0x56	; 86
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	84 e8       	ldi	r24, 0x84	; 132
    1946:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1948:	e6 e5       	ldi	r30, 0x56	; 86
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	88 23       	and	r24, r24
    1950:	dc f7       	brge	.-10     	; 0x1948 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1952:	e3 e2       	ldi	r30, 0x23	; 35
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1968:	e1 e2       	ldi	r30, 0x21	; 33
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 7f       	andi	r24, 0xF8	; 248
    1970:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1972:	89 81       	ldd	r24, Y+1	; 0x01
}
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <Handle_Buzzer_Alert>:
 *******************************************************************************/
/* Description :
 1- Function handles what happens when timer 1 counts 1 sec to Buzzer status
 */
void Handle_Buzzer_Alert(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	//Increment g_timer_counter by one when Timer counts 1 Sec 
	++g_timer_counter;
    1984:	80 91 86 01 	lds	r24, 0x0186
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 86 01 	sts	0x0186, r24

	//When g_timer_counter counts 60 times that mean that the timer counted 1 minute
	if (g_timer_counter==Minute)
    198e:	80 91 86 01 	lds	r24, 0x0186
    1992:	8c 33       	cpi	r24, 0x3C	; 60
    1994:	31 f4       	brne	.+12     	; 0x19a2 <Handle_Buzzer_Alert+0x26>
	{
		g_flag_buzzer=0;//Set g_flag_buzzer to Zero
    1996:	10 92 87 01 	sts	0x0187, r1
		g_timer_counter=0 ;//Set g_flag_buzzer to Zero
    199a:	10 92 86 01 	sts	0x0186, r1
		Timer1_diinit();//Turn off timer
    199e:	0e 94 2d 14 	call	0x285a	; 0x285a <Timer1_diinit>
	}
}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <Handle_Motor>:

/* Description :
 1- Function handles what happens when timer 1 counts 1 sec to Motor status
 */
void Handle_Motor(void)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	//Increment g_timer_counter by one when Timer counts 1 Sec
	++g_timer_counter;
    19b0:	80 91 86 01 	lds	r24, 0x0186
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	80 93 86 01 	sts	0x0186, r24

	//When g_timer_counter counts 1 time that mean that the timer counted 1 sec 
	if (g_timer_counter==1)
    19ba:	80 91 86 01 	lds	r24, 0x0186
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	21 f4       	brne	.+8      	; 0x19ca <Handle_Motor+0x22>
	{
		g_flag_motor=1;//Set g_flag_buzzer to One
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 93 88 01 	sts	0x0188, r24
    19c8:	13 c0       	rjmp	.+38     	; 0x19f0 <Handle_Motor+0x48>
	}
	//When g_timer_counter counts 4 times that mean that the timer counted another 3 sec 
	else if (g_timer_counter==4)
    19ca:	80 91 86 01 	lds	r24, 0x0186
    19ce:	84 30       	cpi	r24, 0x04	; 4
    19d0:	21 f4       	brne	.+8      	; 0x19da <Handle_Motor+0x32>
	{
		g_flag_motor=2;//Set g_flag_buzzer to Two
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	80 93 88 01 	sts	0x0188, r24
    19d8:	0b c0       	rjmp	.+22     	; 0x19f0 <Handle_Motor+0x48>
	}
	//When g_timer_counter counts 5 times that mean that the timer counted another 1 sec 
	else if (g_timer_counter==5)
    19da:	80 91 86 01 	lds	r24, 0x0186
    19de:	85 30       	cpi	r24, 0x05	; 5
    19e0:	39 f4       	brne	.+14     	; 0x19f0 <Handle_Motor+0x48>
	{
		g_flag_motor=3;//Set g_flag_buzzer to Three
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	80 93 88 01 	sts	0x0188, r24
		g_timer_counter=0 ;//Set g_flag_buzzer to Zero
    19e8:	10 92 86 01 	sts	0x0186, r1
		Timer1_diinit();//Turn off timer
    19ec:	0e 94 2d 14 	call	0x285a	; 0x285a <Timer1_diinit>
	}
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <main>:

/*******************************************************************************
 *         					  Main Program     				   				   *
 *******************************************************************************/
int main(void)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	//Enable microcontroller2 modules
	Init_Microcontroller2_Modules();
    19fe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <Init_Microcontroller2_Modules>

	//Receive And Check New Password for the first time and send the result to microcontroller1
	Receive_And_Check_New_Password();
    1a02:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Receive_And_Check_New_Password>

	//Program loop
	while(1)
	{
		//Waiting for receiving a command from microcontroller1 and perform it
		Receive_Command();
    1a06:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <Receive_Command>
    1a0a:	fd cf       	rjmp	.-6      	; 0x1a06 <main+0x10>

00001a0c <Receive_Command>:
/* Description :
 * Function receives an command from microcontroller1
  and do an action according to the command which will be sent
 */
void Receive_Command(void)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <Receive_Command+0x6>
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	//Wait until microcontroller1 send an order to receives a command
	while (UART_recieveByte() != Command);
    1a18:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    1a1c:	80 31       	cpi	r24, 0x10	; 16
    1a1e:	e1 f7       	brne	.-8      	; 0x1a18 <Receive_Command+0xc>

	//Save the command in variable "Command_Name"
	uint8 Command_Name =  UART_recieveByte();
    1a20:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    1a24:	89 83       	std	Y+1, r24	; 0x01

	//Check which command has been sent
	switch(Command_Name)
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3b 83       	std	Y+3, r19	; 0x03
    1a2e:	2a 83       	std	Y+2, r18	; 0x02
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	80 33       	cpi	r24, 0x30	; 48
    1a36:	91 05       	cpc	r25, r1
    1a38:	41 f1       	breq	.+80     	; 0x1a8a <Receive_Command+0x7e>
    1a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3e:	21 33       	cpi	r18, 0x31	; 49
    1a40:	31 05       	cpc	r19, r1
    1a42:	84 f4       	brge	.+32     	; 0x1a64 <Receive_Command+0x58>
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	9b 81       	ldd	r25, Y+3	; 0x03
    1a48:	8b 32       	cpi	r24, 0x2B	; 43
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	21 f1       	breq	.+72     	; 0x1a96 <Receive_Command+0x8a>
    1a4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a50:	3b 81       	ldd	r19, Y+3	; 0x03
    1a52:	2d 32       	cpi	r18, 0x2D	; 45
    1a54:	31 05       	cpc	r19, r1
    1a56:	11 f1       	breq	.+68     	; 0x1a9c <Receive_Command+0x90>
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	80 32       	cpi	r24, 0x20	; 32
    1a5e:	91 05       	cpc	r25, r1
    1a60:	89 f0       	breq	.+34     	; 0x1a84 <Receive_Command+0x78>
    1a62:	25 c0       	rjmp	.+74     	; 0x1aae <Receive_Command+0xa2>
    1a64:	2a 81       	ldd	r18, Y+2	; 0x02
    1a66:	3b 81       	ldd	r19, Y+3	; 0x03
    1a68:	20 35       	cpi	r18, 0x50	; 80
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <Receive_Command+0x96>
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	80 36       	cpi	r24, 0x60	; 96
    1a74:	91 05       	cpc	r25, r1
    1a76:	c1 f0       	breq	.+48     	; 0x1aa8 <Receive_Command+0x9c>
    1a78:	2a 81       	ldd	r18, Y+2	; 0x02
    1a7a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a7c:	20 34       	cpi	r18, 0x40	; 64
    1a7e:	31 05       	cpc	r19, r1
    1a80:	39 f0       	breq	.+14     	; 0x1a90 <Receive_Command+0x84>
    1a82:	15 c0       	rjmp	.+42     	; 0x1aae <Receive_Command+0xa2>
	{
	case New_Password : // If it was New_Password call Receive_And_Check_New_Password function
		Receive_And_Check_New_Password(); ;
    1a84:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Receive_And_Check_New_Password>
    1a88:	15 c0       	rjmp	.+42     	; 0x1ab4 <Receive_Command+0xa8>
		break;
	case W_EEPROM:// If it was W_EEPROM call Save_Password_In_EEPROM function
		Save_Password_In_EEPROM ();
    1a8a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Save_Password_In_EEPROM>
    1a8e:	12 c0       	rjmp	.+36     	; 0x1ab4 <Receive_Command+0xa8>
		break;
	case R_EEPROM:// If it was R_EEPROM call Send_Old_Passord function
		Send_Old_Passord();
    1a90:	0e 94 11 10 	call	0x2022	; 0x2022 <Send_Old_Passord>
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <Receive_Command+0xa8>
		break;
	case '+' :// If it was '+' call Receive_And_Check_Old_Password function
		Receive_And_Check_Old_Password();
    1a96:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Receive_And_Check_Old_Password>
    1a9a:	0c c0       	rjmp	.+24     	; 0x1ab4 <Receive_Command+0xa8>
		break;
	case '-' :// If it was '-' call Receive_And_Check_Old_Password function
		Receive_And_Check_Old_Password();
    1a9c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Receive_And_Check_Old_Password>
    1aa0:	09 c0       	rjmp	.+18     	; 0x1ab4 <Receive_Command+0xa8>
		break;
	case buzzer :// If it was buzzer call buzzer_action function
		buzzer_action();
    1aa2:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <buzzer_action>
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <Receive_Command+0xa8>
		break;
	case motor:// If it was motor call motor_action function
		motor_action();
    1aa8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <motor_action>
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <Receive_Command+0xa8>
		break;
	default://Else UART_sendByte Command
		UART_sendByte(Command);
    1aae:	80 e1       	ldi	r24, 0x10	; 16
    1ab0:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		break;
	}
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <Init_Microcontroller2_Modules>:

/* Description :
 1- Initiates microcontroller2 modules (global interrupts , UARt module ,EEPROM module ,DcMotor module )
 */
void Init_Microcontroller2_Modules(void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	2e 97       	sbiw	r28, 0x0e	; 14
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7) ; ///Enable global interrupts in MC.
    1ad4:	af e5       	ldi	r26, 0x5F	; 95
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ef e5       	ldi	r30, 0x5F	; 95
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 68       	ori	r24, 0x80	; 128
    1ae0:	8c 93       	st	X, r24

	//Enable UARt module
	Uart_ConfigType UART_Configuration ={_9600 ,_8_Bits, Disable,_1_bit,Asynchronous_Operation,Asynchronous__Operation };
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	9b 87       	std	Y+11, r25	; 0x0b
    1ae8:	8a 87       	std	Y+10, r24	; 0x0a
    1aea:	ee e6       	ldi	r30, 0x6E	; 110
    1aec:	f1 e0       	ldi	r31, 0x01	; 1
    1aee:	fd 87       	std	Y+13, r31	; 0x0d
    1af0:	ec 87       	std	Y+12, r30	; 0x0c
    1af2:	f9 e0       	ldi	r31, 0x09	; 9
    1af4:	fe 87       	std	Y+14, r31	; 0x0e
    1af6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1afa:	00 80       	ld	r0, Z
    1afc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1afe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	9d 87       	std	Y+13, r25	; 0x0d
    1b04:	8c 87       	std	Y+12, r24	; 0x0c
    1b06:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b08:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b0a:	00 82       	st	Z, r0
    1b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	9b 87       	std	Y+11, r25	; 0x0b
    1b14:	8a 87       	std	Y+10, r24	; 0x0a
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	9e 87       	std	Y+14, r25	; 0x0e
    1b1c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b1e:	ee 23       	and	r30, r30
    1b20:	51 f7       	brne	.-44     	; 0x1af6 <Init_Microcontroller2_Modules+0x36>
	UART_init(&UART_Configuration);
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UART_init>

	//Enable EEPROM module
	EEPROM_init();
    1b2a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <EEPROM_init>

	//Enable DcMotor module
	DcMotor_Init();
    1b2e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DcMotor_Init>

	//Enable buzzer module
	buzzer_Init();
    1b32:	0e 94 b3 07 	call	0xf66	; 0xf66 <buzzer_Init>
}
    1b36:	2e 96       	adiw	r28, 0x0e	; 14
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <Receive_And_Check_New_Password>:
   to microcontroller2 and save it in globabl array consists of 10 elemnts
 2- Check if the user typed the new password correctly twice 
 3- Send the result of checking to microcontroller1
 */
void Receive_And_Check_New_Password(void)
{
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <Receive_And_Check_New_Password+0xa>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	//Wait until microcontroller1 send an order to receives a new password
	while(UART_recieveByte()!= Send);
    1b56:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    1b5a:	80 3a       	cpi	r24, 0xA0	; 160
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <Receive_And_Check_New_Password+0xe>
	uint8 count =0 ; // Initial local counter for looping process
    1b5e:	1a 82       	std	Y+2, r1	; 0x02
    1b60:	0c c0       	rjmp	.+24     	; 0x1b7a <Receive_And_Check_New_Password+0x32>

	//Receives the new password and save it in global array g_New_Password_check
	while (count !=(PASSWORD_SIZE*2))
	{
		g_New_Password_check[count]=UART_recieveByte();
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	08 2f       	mov	r16, r24
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	e1 57       	subi	r30, 0x71	; 113
    1b70:	fe 4f       	sbci	r31, 0xFE	; 254
    1b72:	80 83       	st	Z, r24
		count ++;
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	8a 83       	std	Y+2, r24	; 0x02
	//Wait until microcontroller1 send an order to receives a new password
	while(UART_recieveByte()!= Send);
	uint8 count =0 ; // Initial local counter for looping process

	//Receives the new password and save it in global array g_New_Password_check
	while (count !=(PASSWORD_SIZE*2))
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	8a 30       	cpi	r24, 0x0A	; 10
    1b7e:	89 f7       	brne	.-30     	; 0x1b62 <Receive_And_Check_New_Password+0x1a>
	/*
	  * Initiate count by Zero value agian to re-looping
	  * Initiate local variable passwordMatch with true value to re-check 
	  	if the 2 password were identical or not 
	*/
	uint8 passwordMatch = TRUE;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
	count =0 ;
    1b84:	1a 82       	std	Y+2, r1	; 0x02
    1b86:	16 c0       	rjmp	.+44     	; 0x1bb4 <Receive_And_Check_New_Password+0x6c>
	//Check if the first 5 element in g_New_Password_check is equal to the second t 5 element in g_New_Password_check
	while (count!=PASSWORD_SIZE)
	{
		if (g_New_Password_check[count]!=g_New_Password_check[(count)+5])
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e1 57       	subi	r30, 0x71	; 113
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	20 81       	ld	r18, Z
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	05 96       	adiw	r24, 0x05	; 5
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e1 57       	subi	r30, 0x71	; 113
    1ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 17       	cp	r18, r24
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <Receive_And_Check_New_Password+0x66>
		{
			passwordMatch = FALSE;
    1baa:	19 82       	std	Y+1, r1	; 0x01
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <Receive_And_Check_New_Password+0x72>
			break ;
		}
		count++;
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	8f 5f       	subi	r24, 0xFF	; 255
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
	  	if the 2 password were identical or not 
	*/
	uint8 passwordMatch = TRUE;
	count =0 ;
	//Check if the first 5 element in g_New_Password_check is equal to the second t 5 element in g_New_Password_check
	while (count!=PASSWORD_SIZE)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	85 30       	cpi	r24, 0x05	; 5
    1bb8:	39 f7       	brne	.-50     	; 0x1b88 <Receive_And_Check_New_Password+0x40>

	/*
	  * Sending the result of checking if it was TRUE during identical passwords
	  	or FALSE during un-identical passwords to microcontroller1
	*/
	if (passwordMatch)
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 23       	and	r24, r24
    1bbe:	39 f0       	breq	.+14     	; 0x1bce <Receive_And_Check_New_Password+0x86>
	{
		UART_sendByte(Send);
    1bc0:	80 ea       	ldi	r24, 0xA0	; 160
    1bc2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		UART_sendByte(TRUE); // Send TRUE if passwords match
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <Receive_And_Check_New_Password+0x92>
	}
	else
	{
		UART_sendByte(Send);
    1bce:	80 ea       	ldi	r24, 0xA0	; 160
    1bd0:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		UART_sendByte(FALSE); // Send FALSE if passwords don't match
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
	}
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	08 95       	ret

00001be8 <Receive_And_Check_Old_Password>:
   to microcontroller2
 2- Check if the user typed the old equals the current password in EEPROM 
 3- Send the result of checking to microcontroller1
 */
void Receive_And_Check_Old_Password(void)
{
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	65 97       	sbiw	r28, 0x15	; 21
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
	//Wait until microcontroller1 send an order to receives a new password
	while(UART_recieveByte()!= Send);
    1c00:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    1c04:	80 3a       	cpi	r24, 0xA0	; 160
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <Receive_And_Check_Old_Password+0x18>

	uint8 count =0 ;// Initial local counter for looping process
    1c08:	18 8a       	std	Y+16, r1	; 0x10
    1c0a:	0c c0       	rjmp	.+24     	; 0x1c24 <Receive_And_Check_Old_Password+0x3c>

	//Receives the old password and save it in global array g_New_Password_check
	while (count !=(PASSWORD_SIZE*2))
	{
		g_New_Password_check[count]=UART_recieveByte();
    1c0c:	88 89       	ldd	r24, Y+16	; 0x10
    1c0e:	08 2f       	mov	r16, r24
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    1c16:	f8 01       	movw	r30, r16
    1c18:	e1 57       	subi	r30, 0x71	; 113
    1c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1c:	80 83       	st	Z, r24
		count ++;
    1c1e:	88 89       	ldd	r24, Y+16	; 0x10
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	88 8b       	std	Y+16, r24	; 0x10
	while(UART_recieveByte()!= Send);

	uint8 count =0 ;// Initial local counter for looping process

	//Receives the old password and save it in global array g_New_Password_check
	while (count !=(PASSWORD_SIZE*2))
    1c24:	88 89       	ldd	r24, Y+16	; 0x10
    1c26:	8a 30       	cpi	r24, 0x0A	; 10
    1c28:	89 f7       	brne	.-30     	; 0x1c0c <Receive_And_Check_Old_Password+0x24>
	  * Initiate local array of PASSWORD_SIZE elements to save the password which will be read from EEPROM
	  * Check the old password with the local array password
	  * Initiate local variable passwordMatch with true value to re-check 
	  	if the 2 password were identical or not 
	*/
	count =0 ;
    1c2a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 arr[PASSWORD_SIZE];
	uint8 passwordMatch = TRUE;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	8f 87       	std	Y+15, r24	; 0x0f
    1c30:	9b c0       	rjmp	.+310    	; 0x1d68 <Receive_And_Check_Old_Password+0x180>
	//Check if the first 5 element in g_New_Password_check is equal to the 5 digit password saved in EEPROM
	while (count!=PASSWORD_SIZE)
	{
		EEPROM_readByte((Pass_Address+count), &arr[count]);
    1c32:	88 89       	ldd	r24, Y+16	; 0x10
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	8f 5e       	subi	r24, 0xEF	; 239
    1c3a:	9c 4f       	sbci	r25, 0xFC	; 252
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	88 89       	ldd	r24, Y+16	; 0x10
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9e 01       	movw	r18, r28
    1c46:	2f 5e       	subi	r18, 0xEF	; 239
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	28 0f       	add	r18, r24
    1c4c:	39 1f       	adc	r19, r25
    1c4e:	ca 01       	movw	r24, r20
    1c50:	b9 01       	movw	r22, r18
    1c52:	0e 94 54 08 	call	0x10a8	; 0x10a8 <EEPROM_readByte>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e2       	ldi	r26, 0x20	; 32
    1c5c:	b1 e4       	ldi	r27, 0x41	; 65
    1c5e:	8b 87       	std	Y+11, r24	; 0x0b
    1c60:	9c 87       	std	Y+12, r25	; 0x0c
    1c62:	ad 87       	std	Y+13, r26	; 0x0d
    1c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8f 83       	std	Y+7, r24	; 0x07
    1c80:	98 87       	std	Y+8, r25	; 0x08
    1c82:	a9 87       	std	Y+9, r26	; 0x09
    1c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c86:	6f 81       	ldd	r22, Y+7	; 0x07
    1c88:	78 85       	ldd	r23, Y+8	; 0x08
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <Receive_And_Check_Old_Password+0xc0>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <Receive_And_Check_Old_Password+0x13e>
	else if (__tmp > 65535)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <Receive_And_Check_Old_Password+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <Receive_And_Check_Old_Password+0x120>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 83       	std	Y+4, r25	; 0x04
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <Receive_And_Check_Old_Password+0x10e>
    1cfa:	9c 83       	std	Y+4, r25	; 0x04
    1cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <Receive_And_Check_Old_Password+0x102>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <Receive_And_Check_Old_Password+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <Receive_And_Check_Old_Password+0x14a>
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if (g_New_Password_check[count] != arr[count])
    1d3a:	88 89       	ldd	r24, Y+16	; 0x10
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	e1 57       	subi	r30, 0x71	; 113
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	40 81       	ld	r20, Z
    1d48:	88 89       	ldd	r24, Y+16	; 0x10
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	ce 01       	movw	r24, r28
    1d50:	41 96       	adiw	r24, 0x11	; 17
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 17       	cp	r20, r24
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <Receive_And_Check_Old_Password+0x17a>
		{
			passwordMatch = FALSE;
    1d5e:	1f 86       	std	Y+15, r1	; 0x0f
    1d60:	07 c0       	rjmp	.+14     	; 0x1d70 <Receive_And_Check_Old_Password+0x188>

			break ;
		}
		count++;
    1d62:	88 89       	ldd	r24, Y+16	; 0x10
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	88 8b       	std	Y+16, r24	; 0x10
	*/
	count =0 ;
	uint8 arr[PASSWORD_SIZE];
	uint8 passwordMatch = TRUE;
	//Check if the first 5 element in g_New_Password_check is equal to the 5 digit password saved in EEPROM
	while (count!=PASSWORD_SIZE)
    1d68:	88 89       	ldd	r24, Y+16	; 0x10
    1d6a:	85 30       	cpi	r24, 0x05	; 5
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <Receive_And_Check_Old_Password+0x188>
    1d6e:	61 cf       	rjmp	.-318    	; 0x1c32 <Receive_And_Check_Old_Password+0x4a>

	/*
	  * Sending the result of checking if it was TRUE during identical passwords
	  	or FALSE during un-identical passwords to microcontroller1
	*/
	if (passwordMatch)
    1d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d72:	88 23       	and	r24, r24
    1d74:	39 f0       	breq	.+14     	; 0x1d84 <Receive_And_Check_Old_Password+0x19c>
	{
		UART_sendByte(Send);
    1d76:	80 ea       	ldi	r24, 0xA0	; 160
    1d78:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		UART_sendByte(TRUE); // Send TRUE if passwords match
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <Receive_And_Check_Old_Password+0x1a8>
	}
	else
	{
		UART_sendByte(Send);
    1d84:	80 ea       	ldi	r24, 0xA0	; 160
    1d86:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		UART_sendByte(FALSE); // Send FALSE if passwords don't match
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
	}
}
    1d90:	65 96       	adiw	r28, 0x15	; 21
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	08 95       	ret

00001da6 <Save_Password_In_EEPROM>:

/* Description :
 * Function saves the variable in the current global array in EEPROM at a certain  address
 */
void Save_Password_In_EEPROM (void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	2f 97       	sbiw	r28, 0x0f	; 15
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
	uint8 count =0 ;// Initial local counter for looping process
    1dba:	1f 86       	std	Y+15, r1	; 0x0f
    1dbc:	86 c0       	rjmp	.+268    	; 0x1eca <Save_Password_In_EEPROM+0x124>

	//looping on password in g_New_Password_check and save it in EEPROM in a certain  address
	while(count<PASSWORD_SIZE)
	{
		EEPROM_writeByte((Pass_Address+count),g_New_Password_check[count]);
    1dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	8f 5e       	subi	r24, 0xEF	; 239
    1dc6:	9c 4f       	sbci	r25, 0xFC	; 252
    1dc8:	ac 01       	movw	r20, r24
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	e1 57       	subi	r30, 0x71	; 113
    1dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd6:	20 81       	ld	r18, Z
    1dd8:	ca 01       	movw	r24, r20
    1dda:	62 2f       	mov	r22, r18
    1ddc:	0e 94 13 08 	call	0x1026	; 0x1026 <EEPROM_writeByte>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e2       	ldi	r26, 0x20	; 32
    1de6:	b1 e4       	ldi	r27, 0x41	; 65
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
    1dea:	9c 87       	std	Y+12, r25	; 0x0c
    1dec:	ad 87       	std	Y+13, r26	; 0x0d
    1dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a ef       	ldi	r20, 0xFA	; 250
    1dfe:	54 e4       	ldi	r21, 0x44	; 68
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8f 83       	std	Y+7, r24	; 0x07
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	a9 87       	std	Y+9, r26	; 0x09
    1e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <Save_Password_In_EEPROM+0x8c>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <Save_Password_In_EEPROM+0x10a>
	else if (__tmp > 65535)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <Save_Password_In_EEPROM+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <Save_Password_In_EEPROM+0xec>
    1e74:	88 ec       	ldi	r24, 0xC8	; 200
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <Save_Password_In_EEPROM+0xda>
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <Save_Password_In_EEPROM+0xce>
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <Save_Password_In_EEPROM+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <Save_Password_In_EEPROM+0x116>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		count++;
    1ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	8f 87       	std	Y+15, r24	; 0x0f
void Save_Password_In_EEPROM (void)
{
	uint8 count =0 ;// Initial local counter for looping process

	//looping on password in g_New_Password_check and save it in EEPROM in a certain  address
	while(count<PASSWORD_SIZE)
    1eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ecc:	85 30       	cpi	r24, 0x05	; 5
    1ece:	08 f4       	brcc	.+2      	; 0x1ed2 <Save_Password_In_EEPROM+0x12c>
    1ed0:	76 cf       	rjmp	.-276    	; 0x1dbe <Save_Password_In_EEPROM+0x18>
		EEPROM_writeByte((Pass_Address+count),g_New_Password_check[count]);
		_delay_ms(10);
		count++;
	}

}
    1ed2:	2f 96       	adiw	r28, 0x0f	; 15
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <buzzer_action>:
 1- Set g_flag_buzzer by 1 
 2- Initiate Timer 1 to count 1 Sec
 3- Handling when the buzzer on and when the buzzer off
 */
void buzzer_action(void)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	2c 97       	sbiw	r28, 0x0c	; 12
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
	g_flag_buzzer=1;//Set g_flag_buzzer by 1 
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	80 93 87 01 	sts	0x0187, r24
		  Compare value = T_required/T_Tick -> 1/(1/(8MHZ/1024))= "7813"
	  }
	  * Pass TimerConfiguration to Init function
	  * Call setcallback function to perform the desired action when timer count 
	*/
	Timer_ConfigType Timer_Configuration = {Timer1_CHA,0,7813,Compare,Fcpu_1024};
    1efe:	ce 01       	movw	r24, r28
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	99 87       	std	Y+9, r25	; 0x09
    1f04:	88 87       	std	Y+8, r24	; 0x08
    1f06:	e7 e7       	ldi	r30, 0x77	; 119
    1f08:	f1 e0       	ldi	r31, 0x01	; 1
    1f0a:	fb 87       	std	Y+11, r31	; 0x0b
    1f0c:	ea 87       	std	Y+10, r30	; 0x0a
    1f0e:	f7 e0       	ldi	r31, 0x07	; 7
    1f10:	fc 87       	std	Y+12, r31	; 0x0c
    1f12:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f14:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f16:	00 80       	ld	r0, Z
    1f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	9b 87       	std	Y+11, r25	; 0x0b
    1f20:	8a 87       	std	Y+10, r24	; 0x0a
    1f22:	e8 85       	ldd	r30, Y+8	; 0x08
    1f24:	f9 85       	ldd	r31, Y+9	; 0x09
    1f26:	00 82       	st	Z, r0
    1f28:	88 85       	ldd	r24, Y+8	; 0x08
    1f2a:	99 85       	ldd	r25, Y+9	; 0x09
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	99 87       	std	Y+9, r25	; 0x09
    1f30:	88 87       	std	Y+8, r24	; 0x08
    1f32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f34:	91 50       	subi	r25, 0x01	; 1
    1f36:	9c 87       	std	Y+12, r25	; 0x0c
    1f38:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f3a:	ee 23       	and	r30, r30
    1f3c:	51 f7       	brne	.-44     	; 0x1f12 <buzzer_action+0x2e>
	Timer_init(&Timer_Configuration);
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	0e 94 2c 12 	call	0x2458	; 0x2458 <Timer_init>
	Timer1_setCallBack(Handle_Buzzer_Alert);
    1f46:	8e eb       	ldi	r24, 0xBE	; 190
    1f48:	9c e0       	ldi	r25, 0x0C	; 12
    1f4a:	0e 94 1b 14 	call	0x2836	; 0x2836 <Timer1_setCallBack>

	//Turn on Buzzer
	buzzer_On();
    1f4e:	0e 94 c4 07 	call	0xf88	; 0xf88 <buzzer_On>

	//Wait until timer count 1 sec and change g_flag_buzzer to 0 
	while(g_flag_buzzer!=0);
    1f52:	80 91 87 01 	lds	r24, 0x0187
    1f56:	88 23       	and	r24, r24
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <buzzer_action+0x6e>

	//Turn off Buzzer
	buzzer_Off();
    1f5a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <buzzer_Off>
}
    1f5e:	2c 96       	adiw	r28, 0x0c	; 12
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <motor_action>:
/* Description :
 1- Initiate Timer 1 to count 1 Sec
 2-  Handling when the motor on and when the mototr off
 */
void motor_action(void)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	2c 97       	sbiw	r28, 0x0c	; 12
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
	  }
	  * Pass TimerConfiguration to Init function
	  * Chack the old password with the local array password
	  * Call setcallback function to perform the desired action when timer count 
	*/
	Timer_ConfigType Timer_Configuration = {Timer1_CHA,0,7813,Compare,Fcpu_1024};
    1f84:	ce 01       	movw	r24, r28
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	99 87       	std	Y+9, r25	; 0x09
    1f8a:	88 87       	std	Y+8, r24	; 0x08
    1f8c:	ee e7       	ldi	r30, 0x7E	; 126
    1f8e:	f1 e0       	ldi	r31, 0x01	; 1
    1f90:	fb 87       	std	Y+11, r31	; 0x0b
    1f92:	ea 87       	std	Y+10, r30	; 0x0a
    1f94:	f7 e0       	ldi	r31, 0x07	; 7
    1f96:	fc 87       	std	Y+12, r31	; 0x0c
    1f98:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f9a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f9c:	00 80       	ld	r0, Z
    1f9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	9b 87       	std	Y+11, r25	; 0x0b
    1fa6:	8a 87       	std	Y+10, r24	; 0x0a
    1fa8:	e8 85       	ldd	r30, Y+8	; 0x08
    1faa:	f9 85       	ldd	r31, Y+9	; 0x09
    1fac:	00 82       	st	Z, r0
    1fae:	88 85       	ldd	r24, Y+8	; 0x08
    1fb0:	99 85       	ldd	r25, Y+9	; 0x09
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	99 87       	std	Y+9, r25	; 0x09
    1fb6:	88 87       	std	Y+8, r24	; 0x08
    1fb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fba:	91 50       	subi	r25, 0x01	; 1
    1fbc:	9c 87       	std	Y+12, r25	; 0x0c
    1fbe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fc0:	ee 23       	and	r30, r30
    1fc2:	51 f7       	brne	.-44     	; 0x1f98 <motor_action+0x28>
	Timer_init(&Timer_Configuration);
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	0e 94 2c 12 	call	0x2458	; 0x2458 <Timer_init>
	Timer1_setCallBack(Handle_Motor);
    1fcc:	84 ed       	ldi	r24, 0xD4	; 212
    1fce:	9c e0       	ldi	r25, 0x0C	; 12
    1fd0:	0e 94 1b 14 	call	0x2836	; 0x2836 <Timer1_setCallBack>

	/*
	* Motor control to rotate clockwise for 1 Sec as handeld in Handle_Motor function
	*/
	DcMotor_Rotate(CW,100);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	64 e6       	ldi	r22, 0x64	; 100
    1fd8:	0e 94 32 07 	call	0xe64	; 0xe64 <DcMotor_Rotate>
	while (g_flag_motor!=1){};
    1fdc:	80 91 88 01 	lds	r24, 0x0188
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	e1 f7       	brne	.-8      	; 0x1fdc <motor_action+0x6c>

	/*
	* Motor control to holding motor motion for 3 Sec as handled in Handle_Motor function
	*/
	DcMotor_Rotate(stop,0);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	0e 94 32 07 	call	0xe64	; 0xe64 <DcMotor_Rotate>
	while (g_flag_motor!=2){};
    1fec:	80 91 88 01 	lds	r24, 0x0188
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	e1 f7       	brne	.-8      	; 0x1fec <motor_action+0x7c>

	/*
	* Motor control to rotate Ant-clockwise for 1 Sec as handled in Handle_Motor function
	*/	
	DcMotor_Rotate(A_CW,100);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	64 e6       	ldi	r22, 0x64	; 100
    1ff8:	0e 94 32 07 	call	0xe64	; 0xe64 <DcMotor_Rotate>
	while (g_flag_motor!=3){};
    1ffc:	80 91 88 01 	lds	r24, 0x0188
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <motor_action+0x8c>

	/*
	* Motor control to stop motor
	* Re-set g_flag_motor to zero
	*/
	DcMotor_Rotate(stop,0);
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	0e 94 32 07 	call	0xe64	; 0xe64 <DcMotor_Rotate>
	g_flag_motor=0;
    200c:	10 92 88 01 	sts	0x0188, r1
}
    2010:	2c 96       	adiw	r28, 0x0c	; 12
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <Send_Old_Passord>:

/* Description :
 * Function that read old password from EEPROM and send it to microcontroller1
 */
void Send_Old_Passord(void)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	64 97       	sbiw	r28, 0x14	; 20
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
	uint8 count =0 ;// Initial local counter for looping process
    2036:	1f 86       	std	Y+15, r1	; 0x0f
    2038:	87 c0       	rjmp	.+270    	; 0x2148 <Send_Old_Passord+0x126>
	//Read the old password form EEPROM and save it in local array arr[]
	uint8 arr[PASSWORD_SIZE];
	while(count<PASSWORD_SIZE)
	{

		EEPROM_readByte((Pass_Address+count), &arr[count]);
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	8f 5e       	subi	r24, 0xEF	; 239
    2042:	9c 4f       	sbci	r25, 0xFC	; 252
    2044:	ac 01       	movw	r20, r24
    2046:	8f 85       	ldd	r24, Y+15	; 0x0f
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e 01       	movw	r18, r28
    204e:	20 5f       	subi	r18, 0xF0	; 240
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	28 0f       	add	r18, r24
    2054:	39 1f       	adc	r19, r25
    2056:	ca 01       	movw	r24, r20
    2058:	b9 01       	movw	r22, r18
    205a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <EEPROM_readByte>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 e2       	ldi	r26, 0x20	; 32
    2064:	b1 e4       	ldi	r27, 0x41	; 65
    2066:	8b 87       	std	Y+11, r24	; 0x0b
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	ad 87       	std	Y+13, r26	; 0x0d
    206c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2070:	7c 85       	ldd	r23, Y+12	; 0x0c
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a ef       	ldi	r20, 0xFA	; 250
    207c:	54 e4       	ldi	r21, 0x44	; 68
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8f 83       	std	Y+7, r24	; 0x07
    2088:	98 87       	std	Y+8, r25	; 0x08
    208a:	a9 87       	std	Y+9, r26	; 0x09
    208c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <Send_Old_Passord+0x8e>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <Send_Old_Passord+0x10c>
	else if (__tmp > 65535)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <Send_Old_Passord+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <Send_Old_Passord+0xee>
    20f2:	88 ec       	ldi	r24, 0xC8	; 200
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <Send_Old_Passord+0xdc>
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <Send_Old_Passord+0xd0>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <Send_Old_Passord+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <Send_Old_Passord+0x118>
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		count++;
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	8f 5f       	subi	r24, 0xFF	; 255
    2146:	8f 87       	std	Y+15, r24	; 0x0f
{
	uint8 count =0 ;// Initial local counter for looping process

	//Read the old password form EEPROM and save it in local array arr[]
	uint8 arr[PASSWORD_SIZE];
	while(count<PASSWORD_SIZE)
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
    214a:	85 30       	cpi	r24, 0x05	; 5
    214c:	08 f4       	brcc	.+2      	; 0x2150 <Send_Old_Passord+0x12e>
    214e:	75 cf       	rjmp	.-278    	; 0x203a <Send_Old_Passord+0x18>
		_delay_ms(10);
		count++;
	}

	// Initiates count by Zero value again to re-looping
	count=0;
    2150:	1f 86       	std	Y+15, r1	; 0x0f

	/*send a command Send to microcontroller1 to tell it
	  that microcontroller2 will start send the saved password in EEPROM
	 */
	UART_sendByte(Send);
    2152:	80 ea       	ldi	r24, 0xA0	; 160
    2154:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <Send_Old_Passord+0x154>
	while(count<PASSWORD_SIZE)
	{
		UART_sendByte(arr[count]);
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	ce 01       	movw	r24, r28
    2162:	40 96       	adiw	r24, 0x10	; 16
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		count++;
    2170:	8f 85       	ldd	r24, Y+15	; 0x0f
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	8f 87       	std	Y+15, r24	; 0x0f

	/*send a command Send to microcontroller1 to tell it
	  that microcontroller2 will start send the saved password in EEPROM
	 */
	UART_sendByte(Send);
	while(count<PASSWORD_SIZE)
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	85 30       	cpi	r24, 0x05	; 5
    217a:	78 f3       	brcs	.-34     	; 0x215a <Send_Old_Passord+0x138>
	{
		UART_sendByte(arr[count]);
		count++;
	}
}
    217c:	64 96       	adiw	r28, 0x14	; 20
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
//Interrupt Service Routine for timer 0 Overflow Mode
ISR(TIMER0_OVF_vect)
{
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	2f 93       	push	r18
    219a:	3f 93       	push	r19
    219c:	4f 93       	push	r20
    219e:	5f 93       	push	r21
    21a0:	6f 93       	push	r22
    21a2:	7f 93       	push	r23
    21a4:	8f 93       	push	r24
    21a6:	9f 93       	push	r25
    21a8:	af 93       	push	r26
    21aa:	bf 93       	push	r27
    21ac:	ef 93       	push	r30
    21ae:	ff 93       	push	r31
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    21b8:	80 91 89 01 	lds	r24, 0x0189
    21bc:	90 91 8a 01 	lds	r25, 0x018A
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	29 f0       	breq	.+10     	; 0x21ce <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    21c4:	e0 91 89 01 	lds	r30, 0x0189
    21c8:	f0 91 8a 01 	lds	r31, 0x018A
    21cc:	09 95       	icall
	}
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	ff 91       	pop	r31
    21d4:	ef 91       	pop	r30
    21d6:	bf 91       	pop	r27
    21d8:	af 91       	pop	r26
    21da:	9f 91       	pop	r25
    21dc:	8f 91       	pop	r24
    21de:	7f 91       	pop	r23
    21e0:	6f 91       	pop	r22
    21e2:	5f 91       	pop	r21
    21e4:	4f 91       	pop	r20
    21e6:	3f 91       	pop	r19
    21e8:	2f 91       	pop	r18
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <__vector_19>:
//Interrupt Service Routine for timer 0 Compare Mode
ISR(TIMER0_COMP_vect)
{
    21f4:	1f 92       	push	r1
    21f6:	0f 92       	push	r0
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	0f 92       	push	r0
    21fc:	11 24       	eor	r1, r1
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	4f 93       	push	r20
    2204:	5f 93       	push	r21
    2206:	6f 93       	push	r22
    2208:	7f 93       	push	r23
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	af 93       	push	r26
    2210:	bf 93       	push	r27
    2212:	ef 93       	push	r30
    2214:	ff 93       	push	r31
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    221e:	80 91 89 01 	lds	r24, 0x0189
    2222:	90 91 8a 01 	lds	r25, 0x018A
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	29 f0       	breq	.+10     	; 0x2234 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    222a:	e0 91 89 01 	lds	r30, 0x0189
    222e:	f0 91 8a 01 	lds	r31, 0x018A
    2232:	09 95       	icall
	}
}
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	ff 91       	pop	r31
    223a:	ef 91       	pop	r30
    223c:	bf 91       	pop	r27
    223e:	af 91       	pop	r26
    2240:	9f 91       	pop	r25
    2242:	8f 91       	pop	r24
    2244:	7f 91       	pop	r23
    2246:	6f 91       	pop	r22
    2248:	5f 91       	pop	r21
    224a:	4f 91       	pop	r20
    224c:	3f 91       	pop	r19
    224e:	2f 91       	pop	r18
    2250:	0f 90       	pop	r0
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	0f 90       	pop	r0
    2256:	1f 90       	pop	r1
    2258:	18 95       	reti

0000225a <__vector_8>:
//Interrupt Service Routine for timer 1 Overflow Mode
ISR(TIMER1_OVF_vect)
{
    225a:	1f 92       	push	r1
    225c:	0f 92       	push	r0
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	0f 92       	push	r0
    2262:	11 24       	eor	r1, r1
    2264:	2f 93       	push	r18
    2266:	3f 93       	push	r19
    2268:	4f 93       	push	r20
    226a:	5f 93       	push	r21
    226c:	6f 93       	push	r22
    226e:	7f 93       	push	r23
    2270:	8f 93       	push	r24
    2272:	9f 93       	push	r25
    2274:	af 93       	push	r26
    2276:	bf 93       	push	r27
    2278:	ef 93       	push	r30
    227a:	ff 93       	push	r31
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2284:	80 91 8b 01 	lds	r24, 0x018B
    2288:	90 91 8c 01 	lds	r25, 0x018C
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	29 f0       	breq	.+10     	; 0x229a <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2290:	e0 91 8b 01 	lds	r30, 0x018B
    2294:	f0 91 8c 01 	lds	r31, 0x018C
    2298:	09 95       	icall
	}
}
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	ff 91       	pop	r31
    22a0:	ef 91       	pop	r30
    22a2:	bf 91       	pop	r27
    22a4:	af 91       	pop	r26
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	7f 91       	pop	r23
    22ac:	6f 91       	pop	r22
    22ae:	5f 91       	pop	r21
    22b0:	4f 91       	pop	r20
    22b2:	3f 91       	pop	r19
    22b4:	2f 91       	pop	r18
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_6>:
//Interrupt Service Routine for timer 1 Compare Mode Channel A
ISR(TIMER1_COMPA_vect)
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	2f 93       	push	r18
    22cc:	3f 93       	push	r19
    22ce:	4f 93       	push	r20
    22d0:	5f 93       	push	r21
    22d2:	6f 93       	push	r22
    22d4:	7f 93       	push	r23
    22d6:	8f 93       	push	r24
    22d8:	9f 93       	push	r25
    22da:	af 93       	push	r26
    22dc:	bf 93       	push	r27
    22de:	ef 93       	push	r30
    22e0:	ff 93       	push	r31
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    22ea:	80 91 8b 01 	lds	r24, 0x018B
    22ee:	90 91 8c 01 	lds	r25, 0x018C
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	29 f0       	breq	.+10     	; 0x2300 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    22f6:	e0 91 8b 01 	lds	r30, 0x018B
    22fa:	f0 91 8c 01 	lds	r31, 0x018C
    22fe:	09 95       	icall
	}
}
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	ff 91       	pop	r31
    2306:	ef 91       	pop	r30
    2308:	bf 91       	pop	r27
    230a:	af 91       	pop	r26
    230c:	9f 91       	pop	r25
    230e:	8f 91       	pop	r24
    2310:	7f 91       	pop	r23
    2312:	6f 91       	pop	r22
    2314:	5f 91       	pop	r21
    2316:	4f 91       	pop	r20
    2318:	3f 91       	pop	r19
    231a:	2f 91       	pop	r18
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_7>:
//Interrupt Service Routine for timer 1 Compare Mode Channel B
ISR(TIMER1_COMPB_vect)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	2f 93       	push	r18
    2332:	3f 93       	push	r19
    2334:	4f 93       	push	r20
    2336:	5f 93       	push	r21
    2338:	6f 93       	push	r22
    233a:	7f 93       	push	r23
    233c:	8f 93       	push	r24
    233e:	9f 93       	push	r25
    2340:	af 93       	push	r26
    2342:	bf 93       	push	r27
    2344:	ef 93       	push	r30
    2346:	ff 93       	push	r31
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2350:	80 91 8b 01 	lds	r24, 0x018B
    2354:	90 91 8c 01 	lds	r25, 0x018C
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	29 f0       	breq	.+10     	; 0x2366 <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    235c:	e0 91 8b 01 	lds	r30, 0x018B
    2360:	f0 91 8c 01 	lds	r31, 0x018C
    2364:	09 95       	icall
		}
}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	ff 91       	pop	r31
    236c:	ef 91       	pop	r30
    236e:	bf 91       	pop	r27
    2370:	af 91       	pop	r26
    2372:	9f 91       	pop	r25
    2374:	8f 91       	pop	r24
    2376:	7f 91       	pop	r23
    2378:	6f 91       	pop	r22
    237a:	5f 91       	pop	r21
    237c:	4f 91       	pop	r20
    237e:	3f 91       	pop	r19
    2380:	2f 91       	pop	r18
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	0f 90       	pop	r0
    2388:	1f 90       	pop	r1
    238a:	18 95       	reti

0000238c <__vector_4>:
//Interrupt Service Routine for timer 2 Compare Mode
ISR(TIMER2_OVF_vect)
{
    238c:	1f 92       	push	r1
    238e:	0f 92       	push	r0
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	0f 92       	push	r0
    2394:	11 24       	eor	r1, r1
    2396:	2f 93       	push	r18
    2398:	3f 93       	push	r19
    239a:	4f 93       	push	r20
    239c:	5f 93       	push	r21
    239e:	6f 93       	push	r22
    23a0:	7f 93       	push	r23
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    23b6:	80 91 8d 01 	lds	r24, 0x018D
    23ba:	90 91 8e 01 	lds	r25, 0x018E
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	29 f0       	breq	.+10     	; 0x23cc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23c2:	e0 91 8d 01 	lds	r30, 0x018D
    23c6:	f0 91 8e 01 	lds	r31, 0x018E
    23ca:	09 95       	icall
	}
}
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	ff 91       	pop	r31
    23d2:	ef 91       	pop	r30
    23d4:	bf 91       	pop	r27
    23d6:	af 91       	pop	r26
    23d8:	9f 91       	pop	r25
    23da:	8f 91       	pop	r24
    23dc:	7f 91       	pop	r23
    23de:	6f 91       	pop	r22
    23e0:	5f 91       	pop	r21
    23e2:	4f 91       	pop	r20
    23e4:	3f 91       	pop	r19
    23e6:	2f 91       	pop	r18
    23e8:	0f 90       	pop	r0
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	0f 90       	pop	r0
    23ee:	1f 90       	pop	r1
    23f0:	18 95       	reti

000023f2 <__vector_3>:
//Interrupt Service Routine for timer 2 Compare Mode
ISR(TIMER2_COMP_vect)
{
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	2f 93       	push	r18
    23fe:	3f 93       	push	r19
    2400:	4f 93       	push	r20
    2402:	5f 93       	push	r21
    2404:	6f 93       	push	r22
    2406:	7f 93       	push	r23
    2408:	8f 93       	push	r24
    240a:	9f 93       	push	r25
    240c:	af 93       	push	r26
    240e:	bf 93       	push	r27
    2410:	ef 93       	push	r30
    2412:	ff 93       	push	r31
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    241c:	80 91 8d 01 	lds	r24, 0x018D
    2420:	90 91 8e 01 	lds	r25, 0x018E
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	29 f0       	breq	.+10     	; 0x2432 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2428:	e0 91 8d 01 	lds	r30, 0x018D
    242c:	f0 91 8e 01 	lds	r31, 0x018E
    2430:	09 95       	icall
	}
}
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	ff 91       	pop	r31
    2438:	ef 91       	pop	r30
    243a:	bf 91       	pop	r27
    243c:	af 91       	pop	r26
    243e:	9f 91       	pop	r25
    2440:	8f 91       	pop	r24
    2442:	7f 91       	pop	r23
    2444:	6f 91       	pop	r22
    2446:	5f 91       	pop	r21
    2448:	4f 91       	pop	r20
    244a:	3f 91       	pop	r19
    244c:	2f 91       	pop	r18
    244e:	0f 90       	pop	r0
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	0f 90       	pop	r0
    2454:	1f 90       	pop	r1
    2456:	18 95       	reti

00002458 <Timer_init>:
/* Description :
 * Initialization the timer module
 * Select which timer that wanted to be used
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <Timer_init+0x6>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <Timer_init+0x8>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
	if ((Config_Ptr->Timer)==Timer0)//Select Timer 0
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	80 81       	ld	r24, Z
    246e:	88 23       	and	r24, r24
    2470:	29 f4       	brne	.+10     	; 0x247c <Timer_init+0x24>
	{
		Timer0_init(Config_Ptr);
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	0e 94 68 12 	call	0x24d0	; 0x24d0 <Timer0_init>
    247a:	23 c0       	rjmp	.+70     	; 0x24c2 <Timer_init+0x6a>
	}
	else if( ((Config_Ptr->Timer)==Timer1_CHA) | ((Config_Ptr->Timer)==Timer1_CHB) )//Select Timer 1 and which channel needs to work on
    247c:	e9 81       	ldd	r30, Y+1	; 0x01
    247e:	fa 81       	ldd	r31, Y+2	; 0x02
    2480:	80 81       	ld	r24, Z
    2482:	1c 82       	std	Y+4, r1	; 0x04
    2484:	81 30       	cpi	r24, 0x01	; 1
    2486:	11 f4       	brne	.+4      	; 0x248c <Timer_init+0x34>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	8c 83       	std	Y+4, r24	; 0x04
    248c:	e9 81       	ldd	r30, Y+1	; 0x01
    248e:	fa 81       	ldd	r31, Y+2	; 0x02
    2490:	80 81       	ld	r24, Z
    2492:	1b 82       	std	Y+3, r1	; 0x03
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	11 f4       	brne	.+4      	; 0x249c <Timer_init+0x44>
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	9b 83       	std	Y+3, r25	; 0x03
    249c:	8c 81       	ldd	r24, Y+4	; 0x04
    249e:	9b 81       	ldd	r25, Y+3	; 0x03
    24a0:	89 2b       	or	r24, r25
    24a2:	88 23       	and	r24, r24
    24a4:	29 f0       	breq	.+10     	; 0x24b0 <Timer_init+0x58>
	{
		Timer1_init(Config_Ptr);
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	0e 94 1c 13 	call	0x2638	; 0x2638 <Timer1_init>
    24ae:	09 c0       	rjmp	.+18     	; 0x24c2 <Timer_init+0x6a>
	}
	else if((Config_Ptr->Timer)==Timer2)//Select Timer 2
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	80 81       	ld	r24, Z
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	21 f4       	brne	.+8      	; 0x24c2 <Timer_init+0x6a>
	{
		Timer2_init(Config_Ptr);
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	0e 94 49 14 	call	0x2892	; 0x2892 <Timer2_init>
	}
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <Timer0_init>:
/* Description :
 * Initialization Timer0 function with specification with Compare Mode or Overflow Mode
 */

void Timer0_init(const Timer_ConfigType * Config_Ptr)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <Timer0_init+0x6>
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer control register*/

	//Set The required Timer initial value in TCNT0 Registers
	TCNT0 = Config_Ptr->Initial_value;
    24de:	a2 e5       	ldi	r26, 0x52	; 82
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e9 81       	ldd	r30, Y+1	; 0x01
    24e4:	fa 81       	ldd	r31, Y+2	; 0x02
    24e6:	81 81       	ldd	r24, Z+1	; 0x01
    24e8:	92 81       	ldd	r25, Z+2	; 0x02
    24ea:	8c 93       	st	X, r24

	//Set The required Timer Compare value in compare mode in OCR0 Registers
	OCR0 = Config_Ptr->Compare_value;
    24ec:	ac e5       	ldi	r26, 0x5C	; 92
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e9 81       	ldd	r30, Y+1	; 0x01
    24f2:	fa 81       	ldd	r31, Y+2	; 0x02
    24f4:	83 81       	ldd	r24, Z+3	; 0x03
    24f6:	94 81       	ldd	r25, Z+4	; 0x04
    24f8:	8c 93       	st	X, r24

	/*************************** Configure TCCR0 register***************************/
	//Non PWM mode FOC0=1
	SET_BIT(TCCR0,FOC0);
    24fa:	a3 e5       	ldi	r26, 0x53	; 83
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e3 e5       	ldi	r30, 0x53	; 83
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 68       	ori	r24, 0x80	; 128
    2506:	8c 93       	st	X, r24

	//Insert the required Waveform Generation mode through WGM00:1 BITS
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Waveform_Generation)&0x01)<<6);
    2508:	a3 e5       	ldi	r26, 0x53	; 83
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e3 e5       	ldi	r30, 0x53	; 83
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	28 2f       	mov	r18, r24
    2514:	2f 7b       	andi	r18, 0xBF	; 191
    2516:	e9 81       	ldd	r30, Y+1	; 0x01
    2518:	fa 81       	ldd	r31, Y+2	; 0x02
    251a:	85 81       	ldd	r24, Z+5	; 0x05
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	81 70       	andi	r24, 0x01	; 1
    2522:	90 70       	andi	r25, 0x00	; 0
    2524:	00 24       	eor	r0, r0
    2526:	96 95       	lsr	r25
    2528:	87 95       	ror	r24
    252a:	07 94       	ror	r0
    252c:	96 95       	lsr	r25
    252e:	87 95       	ror	r24
    2530:	07 94       	ror	r0
    2532:	98 2f       	mov	r25, r24
    2534:	80 2d       	mov	r24, r0
    2536:	82 2b       	or	r24, r18
    2538:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Waveform_Generation)&0x02)<<2);
    253a:	a3 e5       	ldi	r26, 0x53	; 83
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e3 e5       	ldi	r30, 0x53	; 83
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	28 2f       	mov	r18, r24
    2546:	27 7f       	andi	r18, 0xF7	; 247
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	85 81       	ldd	r24, Z+5	; 0x05
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	82 70       	andi	r24, 0x02	; 2
    2554:	90 70       	andi	r25, 0x00	; 0
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	82 2b       	or	r24, r18
    2560:	8c 93       	st	X, r24


	//Insert the required Clock Select Prescaler through COM00:2 BITS
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);
    2562:	a3 e5       	ldi	r26, 0x53	; 83
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e3 e5       	ldi	r30, 0x53	; 83
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	98 2f       	mov	r25, r24
    256e:	98 7f       	andi	r25, 0xF8	; 248
    2570:	e9 81       	ldd	r30, Y+1	; 0x01
    2572:	fa 81       	ldd	r31, Y+2	; 0x02
    2574:	86 81       	ldd	r24, Z+6	; 0x06
    2576:	89 2b       	or	r24, r25
    2578:	8c 93       	st	X, r24

	//Insert the required Compare Output mode through COM00:1 BITS
	//Enabled Interrupt for Overflow or Compare mode as required
	if ((Config_Ptr->Waveform_Generation)==Over_Flow)//Setup Overflow case
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	85 81       	ldd	r24, Z+5	; 0x05
    2580:	88 23       	and	r24, r24
    2582:	b1 f4       	brne	.+44     	; 0x25b0 <Timer0_init+0xe0>
	{
		// Reset Bit COM00 & COM01
		CLEAR_BIT(TCCR0,COM00);
    2584:	a3 e5       	ldi	r26, 0x53	; 83
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e3 e5       	ldi	r30, 0x53	; 83
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8f 7e       	andi	r24, 0xEF	; 239
    2590:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
    2592:	a3 e5       	ldi	r26, 0x53	; 83
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e3 e5       	ldi	r30, 0x53	; 83
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8f 7d       	andi	r24, 0xDF	; 223
    259e:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE0);
    25a0:	a9 e5       	ldi	r26, 0x59	; 89
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e9 e5       	ldi	r30, 0x59	; 89
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	81 60       	ori	r24, 0x01	; 1
    25ac:	8c 93       	st	X, r24
    25ae:	1a c0       	rjmp	.+52     	; 0x25e4 <Timer0_init+0x114>
	}
	else if ((Config_Ptr->Waveform_Generation)==Compare)//Setup compare mode case
    25b0:	e9 81       	ldd	r30, Y+1	; 0x01
    25b2:	fa 81       	ldd	r31, Y+2	; 0x02
    25b4:	85 81       	ldd	r24, Z+5	; 0x05
    25b6:	82 30       	cpi	r24, 0x02	; 2
    25b8:	a9 f4       	brne	.+42     	; 0x25e4 <Timer0_init+0x114>
	{
		// SET Bit COM00 & COM01
		CLEAR_BIT(TCCR0,COM00);
    25ba:	a3 e5       	ldi	r26, 0x53	; 83
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e3 e5       	ldi	r30, 0x53	; 83
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 7e       	andi	r24, 0xEF	; 239
    25c6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
    25c8:	a3 e5       	ldi	r26, 0x53	; 83
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e3 e5       	ldi	r30, 0x53	; 83
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	8f 7d       	andi	r24, 0xDF	; 223
    25d4:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0);
    25d6:	a9 e5       	ldi	r26, 0x59	; 89
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e9 e5       	ldi	r30, 0x59	; 89
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	82 60       	ori	r24, 0x02	; 2
    25e2:	8c 93       	st	X, r24
	}
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer 0.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <Timer0_setCallBack+0x6>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	90 93 8a 01 	sts	0x018A, r25
    2604:	80 93 89 01 	sts	0x0189, r24
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <Timer0_diinit>:

/*
 * Description: Function to disable the Timer0 to stop the Timer Driver
 */
void Timer0_diinit(void)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0 ;
    261a:	e2 e5       	ldi	r30, 0x52	; 82
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	10 82       	st	Z, r1
	OCR0 = 0 ;
    2620:	ec e5       	ldi	r30, 0x5C	; 92
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	10 82       	st	Z, r1
	TCCR0 =0 ;
    2626:	e3 e5       	ldi	r30, 0x53	; 83
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	10 82       	st	Z, r1
	TIMSK =0 ;
    262c:	e9 e5       	ldi	r30, 0x59	; 89
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	10 82       	st	Z, r1
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <Timer1_init>:

/* Description :
 * Initialization Timer1 function with specification with Compare Mode or Overflow Mode and configure channels
 */
void Timer1_init(const Timer_ConfigType * Config_Ptr)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <Timer1_init+0x6>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer control registesr*/

	//Set The required Timer initial value in TCNT1 Registers for both channels
	TCNT1 = Config_Ptr->Initial_value;
    2646:	ac e4       	ldi	r26, 0x4C	; 76
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e9 81       	ldd	r30, Y+1	; 0x01
    264c:	fa 81       	ldd	r31, Y+2	; 0x02
    264e:	81 81       	ldd	r24, Z+1	; 0x01
    2650:	92 81       	ldd	r25, Z+2	; 0x02
    2652:	11 96       	adiw	r26, 0x01	; 1
    2654:	9c 93       	st	X, r25
    2656:	8e 93       	st	-X, r24

	//Insert the required Clock Select Prescaler through COM10:2 BITS
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    2658:	ae e4       	ldi	r26, 0x4E	; 78
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	ee e4       	ldi	r30, 0x4E	; 78
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	98 2f       	mov	r25, r24
    2664:	98 7f       	andi	r25, 0xF8	; 248
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	86 81       	ldd	r24, Z+6	; 0x06
    266c:	89 2b       	or	r24, r25
    266e:	8c 93       	st	X, r24
	 * Adjust TCCR1A and TCCR1B  Register
	 * Insert the required Compare Output mode
	 * Enabled Interrupt for Overflow or Compare mode as required
	 */

	if ((Config_Ptr->Timer)==Timer1_CHA)//Setup Channel A in timer 1 
    2670:	e9 81       	ldd	r30, Y+1	; 0x01
    2672:	fa 81       	ldd	r31, Y+2	; 0x02
    2674:	80 81       	ld	r24, Z
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	09 f0       	breq	.+2      	; 0x267c <Timer1_init+0x44>
    267a:	6a c0       	rjmp	.+212    	; 0x2750 <Timer1_init+0x118>
	{

		SET_BIT(TCCR1A,FOC1A);  //Non PWM mode FOC1A=1,FOC1B=1
    267c:	af e4       	ldi	r26, 0x4F	; 79
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	ef e4       	ldi	r30, 0x4F	; 79
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	88 60       	ori	r24, 0x08	; 8
    2688:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    268a:	af e4       	ldi	r26, 0x4F	; 79
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ef e4       	ldi	r30, 0x4F	; 79
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	84 60       	ori	r24, 0x04	; 4
    2696:	8c 93       	st	X, r24

		//To set Compare Output and waveform mode In case of Overflow Mode
		if ((Config_Ptr->Waveform_Generation)==Over_Flow)
    2698:	e9 81       	ldd	r30, Y+1	; 0x01
    269a:	fa 81       	ldd	r31, Y+2	; 0x02
    269c:	85 81       	ldd	r24, Z+5	; 0x05
    269e:	88 23       	and	r24, r24
    26a0:	21 f5       	brne	.+72     	; 0x26ea <Timer1_init+0xb2>
		{
			//Insert the required Waveform Generation mode which is overflow at this case
			CLEAR_BIT(TCCR1A,WGM10);
    26a2:	af e4       	ldi	r26, 0x4F	; 79
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	ef e4       	ldi	r30, 0x4F	; 79
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	8e 7f       	andi	r24, 0xFE	; 254
    26ae:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    26b0:	af e4       	ldi	r26, 0x4F	; 79
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	ef e4       	ldi	r30, 0x4F	; 79
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8d 7f       	andi	r24, 0xFD	; 253
    26bc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    26be:	ae e4       	ldi	r26, 0x4E	; 78
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	ee e4       	ldi	r30, 0x4E	; 78
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	87 7f       	andi	r24, 0xF7	; 247
    26ca:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    26cc:	ae e4       	ldi	r26, 0x4E	; 78
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ee e4       	ldi	r30, 0x4E	; 78
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	8f 7e       	andi	r24, 0xEF	; 239
    26d8:	8c 93       	st	X, r24
			//Insert the required Compare Output mode
			// Reset Bit COM1A0 & COM1A1
			/*CLEAR_BIT(TCCR1A,COM1A0);
			CLEAR_BIT(TCCR1A,COM1A1);*/
			SET_BIT(TIMSK,TOIE1);//Enabled Interrupt
    26da:	a9 e5       	ldi	r26, 0x59	; 89
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e9 e5       	ldi	r30, 0x59	; 89
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	84 60       	ori	r24, 0x04	; 4
    26e6:	8c 93       	st	X, r24
    26e8:	a1 c0       	rjmp	.+322    	; 0x282c <Timer1_init+0x1f4>
		}
		//To set Compare Output mode and waveform in case of Compare Mode
		else if ((Config_Ptr->Waveform_Generation)==Compare)
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	85 81       	ldd	r24, Z+5	; 0x05
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <Timer1_init+0xbe>
    26f4:	9b c0       	rjmp	.+310    	; 0x282c <Timer1_init+0x1f4>
		{
			OCR1A = Config_Ptr->Compare_value;// Compare value for channel A
    26f6:	aa e4       	ldi	r26, 0x4A	; 74
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e9 81       	ldd	r30, Y+1	; 0x01
    26fc:	fa 81       	ldd	r31, Y+2	; 0x02
    26fe:	83 81       	ldd	r24, Z+3	; 0x03
    2700:	94 81       	ldd	r25, Z+4	; 0x04
    2702:	11 96       	adiw	r26, 0x01	; 1
    2704:	9c 93       	st	X, r25
    2706:	8e 93       	st	-X, r24
			//Insert the required Waveform Generation mode which is compare at this case
			CLEAR_BIT(TCCR1A,WGM10);
    2708:	af e4       	ldi	r26, 0x4F	; 79
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ef e4       	ldi	r30, 0x4F	; 79
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8e 7f       	andi	r24, 0xFE	; 254
    2714:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    2716:	af e4       	ldi	r26, 0x4F	; 79
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ef e4       	ldi	r30, 0x4F	; 79
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8d 7f       	andi	r24, 0xFD	; 253
    2722:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    2724:	ae e4       	ldi	r26, 0x4E	; 78
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ee e4       	ldi	r30, 0x4E	; 78
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	88 60       	ori	r24, 0x08	; 8
    2730:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    2732:	ae e4       	ldi	r26, 0x4E	; 78
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ee e4       	ldi	r30, 0x4E	; 78
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8f 7e       	andi	r24, 0xEF	; 239
    273e:	8c 93       	st	X, r24
			//Insert the required Compare Output mode
			// SET Bit COM1A0 & COM1A1
			/*SET_BIT(TCCR1A,COM1A0);
			SET_BIT(TCCR1A,COM1A1);*/
			SET_BIT(TIMSK,OCIE1A);//Enabled Interrupt
    2740:	a9 e5       	ldi	r26, 0x59	; 89
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e9 e5       	ldi	r30, 0x59	; 89
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	80 61       	ori	r24, 0x10	; 16
    274c:	8c 93       	st	X, r24
    274e:	6e c0       	rjmp	.+220    	; 0x282c <Timer1_init+0x1f4>
		}

	}
	else if ((Config_Ptr->Timer)==Timer1_CHB)//Setup Channel B in timer 1 
    2750:	e9 81       	ldd	r30, Y+1	; 0x01
    2752:	fa 81       	ldd	r31, Y+2	; 0x02
    2754:	80 81       	ld	r24, Z
    2756:	82 30       	cpi	r24, 0x02	; 2
    2758:	09 f0       	breq	.+2      	; 0x275c <Timer1_init+0x124>
    275a:	68 c0       	rjmp	.+208    	; 0x282c <Timer1_init+0x1f4>
	{

		SET_BIT(TCCR1A,FOC1B);  //Non PWM mode FOC1A=1,FOC1B=1
    275c:	af e4       	ldi	r26, 0x4F	; 79
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	ef e4       	ldi	r30, 0x4F	; 79
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	84 60       	ori	r24, 0x04	; 4
    2768:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1A);
    276a:	af e4       	ldi	r26, 0x4F	; 79
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	ef e4       	ldi	r30, 0x4F	; 79
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	88 60       	ori	r24, 0x08	; 8
    2776:	8c 93       	st	X, r24

		//To set Compare Output and waveform mode In case of Overflow Mode
		if ((Config_Ptr->Waveform_Generation)==Over_Flow)
    2778:	e9 81       	ldd	r30, Y+1	; 0x01
    277a:	fa 81       	ldd	r31, Y+2	; 0x02
    277c:	85 81       	ldd	r24, Z+5	; 0x05
    277e:	88 23       	and	r24, r24
    2780:	21 f5       	brne	.+72     	; 0x27ca <Timer1_init+0x192>
		{
			//Insert the required Waveform Generation mode through WGM10:3 BITS
			CLEAR_BIT(TCCR1A,WGM10);
    2782:	af e4       	ldi	r26, 0x4F	; 79
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	ef e4       	ldi	r30, 0x4F	; 79
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8e 7f       	andi	r24, 0xFE	; 254
    278e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    2790:	af e4       	ldi	r26, 0x4F	; 79
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ef e4       	ldi	r30, 0x4F	; 79
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8d 7f       	andi	r24, 0xFD	; 253
    279c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    279e:	ae e4       	ldi	r26, 0x4E	; 78
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ee e4       	ldi	r30, 0x4E	; 78
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	87 7f       	andi	r24, 0xF7	; 247
    27aa:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    27ac:	ae e4       	ldi	r26, 0x4E	; 78
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ee e4       	ldi	r30, 0x4E	; 78
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8f 7e       	andi	r24, 0xEF	; 239
    27b8:	8c 93       	st	X, r24
			//Insert the required Compare Output mode
			// Reset Bit COM1B0 & COM1B1
			/*CLEAR_BIT(TCCR1A,COM1B0);
			CLEAR_BIT(TCCR1A,COM1B1);*/
			SET_BIT(TIMSK,TOIE1);//Enabled Interrupt
    27ba:	a9 e5       	ldi	r26, 0x59	; 89
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e9 e5       	ldi	r30, 0x59	; 89
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	84 60       	ori	r24, 0x04	; 4
    27c6:	8c 93       	st	X, r24
    27c8:	31 c0       	rjmp	.+98     	; 0x282c <Timer1_init+0x1f4>
		}
		//To set Compare Output and waveform mode In case of Compare Mode
		else if ((Config_Ptr->Waveform_Generation)==Compare)
    27ca:	e9 81       	ldd	r30, Y+1	; 0x01
    27cc:	fa 81       	ldd	r31, Y+2	; 0x02
    27ce:	85 81       	ldd	r24, Z+5	; 0x05
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	61 f5       	brne	.+88     	; 0x282c <Timer1_init+0x1f4>
		{
			OCR1B = Config_Ptr->Compare_value;// Compare value for channel B
    27d4:	a8 e4       	ldi	r26, 0x48	; 72
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e9 81       	ldd	r30, Y+1	; 0x01
    27da:	fa 81       	ldd	r31, Y+2	; 0x02
    27dc:	83 81       	ldd	r24, Z+3	; 0x03
    27de:	94 81       	ldd	r25, Z+4	; 0x04
    27e0:	11 96       	adiw	r26, 0x01	; 1
    27e2:	9c 93       	st	X, r25
    27e4:	8e 93       	st	-X, r24
			//Insert the required Waveform Generation mode through WGM10:3 BITS
			CLEAR_BIT(TCCR1A,WGM10);
    27e6:	af e4       	ldi	r26, 0x4F	; 79
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ef e4       	ldi	r30, 0x4F	; 79
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8e 7f       	andi	r24, 0xFE	; 254
    27f2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    27f4:	af e4       	ldi	r26, 0x4F	; 79
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	ef e4       	ldi	r30, 0x4F	; 79
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	8d 7f       	andi	r24, 0xFD	; 253
    2800:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    2802:	ae e4       	ldi	r26, 0x4E	; 78
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ee e4       	ldi	r30, 0x4E	; 78
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	88 60       	ori	r24, 0x08	; 8
    280e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    2810:	ae e4       	ldi	r26, 0x4E	; 78
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ee e4       	ldi	r30, 0x4E	; 78
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 7e       	andi	r24, 0xEF	; 239
    281c:	8c 93       	st	X, r24
			//Insert the required Compare Output mode
			// SET Bit COM1B0 & COM1B1
			/*SET_BIT(TCCR1A,COM1B0);
			SET_BIT(TCCR1A,COM1B1);*/
			SET_BIT(TIMSK,OCIE1B);//Enabled Interrupt
    281e:	a9 e5       	ldi	r26, 0x59	; 89
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e9 e5       	ldi	r30, 0x59	; 89
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	88 60       	ori	r24, 0x08	; 8
    282a:	8c 93       	st	X, r24
		}
	}
}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer 1.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	00 d0       	rcall	.+0      	; 0x283c <Timer1_setCallBack+0x6>
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	90 93 8c 01 	sts	0x018C, r25
    284c:	80 93 8b 01 	sts	0x018B, r24
}
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <Timer1_diinit>:

/*
 * Description: Function to disable the Timer1 to stop the Timer Driver
 */
void Timer1_diinit(void)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0 ;
    2862:	ec e4       	ldi	r30, 0x4C	; 76
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	10 82       	st	Z, r1
	OCR1A = 0 ;
    286a:	ea e4       	ldi	r30, 0x4A	; 74
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	11 82       	std	Z+1, r1	; 0x01
    2870:	10 82       	st	Z, r1
	OCR1B = 0 ;
    2872:	e8 e4       	ldi	r30, 0x48	; 72
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	11 82       	std	Z+1, r1	; 0x01
    2878:	10 82       	st	Z, r1
	TCCR1A = 0 ;
    287a:	ef e4       	ldi	r30, 0x4F	; 79
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	10 82       	st	Z, r1
	TCCR1B = 0 ;
    2880:	ee e4       	ldi	r30, 0x4E	; 78
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	10 82       	st	Z, r1
	TIMSK = 0 ;
    2886:	e9 e5       	ldi	r30, 0x59	; 89
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	10 82       	st	Z, r1
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <Timer2_init>:
/* Description :
 * Initialization Timer2 function with specification with Compare Mode or Overflow Mode
 */
void Timer2_init(const Timer_ConfigType * Config_Ptr)

{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <Timer2_init+0x6>
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer control registesr*/

	//Set The required Timer initial value in TCNT2 Registers
	TCNT2 = Config_Ptr->Initial_value;
    28a0:	a4 e4       	ldi	r26, 0x44	; 68
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e9 81       	ldd	r30, Y+1	; 0x01
    28a6:	fa 81       	ldd	r31, Y+2	; 0x02
    28a8:	81 81       	ldd	r24, Z+1	; 0x01
    28aa:	92 81       	ldd	r25, Z+2	; 0x02
    28ac:	8c 93       	st	X, r24

	//Set The required Timer Compare value in compare mode in OCR2 Registers
	OCR2 = Config_Ptr->Compare_value;
    28ae:	a3 e4       	ldi	r26, 0x43	; 67
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e9 81       	ldd	r30, Y+1	; 0x01
    28b4:	fa 81       	ldd	r31, Y+2	; 0x02
    28b6:	83 81       	ldd	r24, Z+3	; 0x03
    28b8:	94 81       	ldd	r25, Z+4	; 0x04
    28ba:	8c 93       	st	X, r24

	/*************************** Configure TCCR0 register***************************/
	//Non PWM mode FOC2=1
	SET_BIT(TCCR2,FOC2);
    28bc:	a5 e4       	ldi	r26, 0x45	; 69
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e5 e4       	ldi	r30, 0x45	; 69
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	80 68       	ori	r24, 0x80	; 128
    28c8:	8c 93       	st	X, r24

	//Insert the required Waveform Generation mode through WGM20:1 BITS
	TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Waveform_Generation)&0x01)<<6);
    28ca:	a5 e4       	ldi	r26, 0x45	; 69
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e5 e4       	ldi	r30, 0x45	; 69
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	28 2f       	mov	r18, r24
    28d6:	2f 7b       	andi	r18, 0xBF	; 191
    28d8:	e9 81       	ldd	r30, Y+1	; 0x01
    28da:	fa 81       	ldd	r31, Y+2	; 0x02
    28dc:	85 81       	ldd	r24, Z+5	; 0x05
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	81 70       	andi	r24, 0x01	; 1
    28e4:	90 70       	andi	r25, 0x00	; 0
    28e6:	00 24       	eor	r0, r0
    28e8:	96 95       	lsr	r25
    28ea:	87 95       	ror	r24
    28ec:	07 94       	ror	r0
    28ee:	96 95       	lsr	r25
    28f0:	87 95       	ror	r24
    28f2:	07 94       	ror	r0
    28f4:	98 2f       	mov	r25, r24
    28f6:	80 2d       	mov	r24, r0
    28f8:	82 2b       	or	r24, r18
    28fa:	8c 93       	st	X, r24
	TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Waveform_Generation)&0x02)<<2);
    28fc:	a5 e4       	ldi	r26, 0x45	; 69
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e5 e4       	ldi	r30, 0x45	; 69
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	28 2f       	mov	r18, r24
    2908:	27 7f       	andi	r18, 0xF7	; 247
    290a:	e9 81       	ldd	r30, Y+1	; 0x01
    290c:	fa 81       	ldd	r31, Y+2	; 0x02
    290e:	85 81       	ldd	r24, Z+5	; 0x05
    2910:	88 2f       	mov	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	82 70       	andi	r24, 0x02	; 2
    2916:	90 70       	andi	r25, 0x00	; 0
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	82 2b       	or	r24, r18
    2922:	8c 93       	st	X, r24


	//Insert the required Clock Select Prescaler through COM20:2 BITS
	TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);
    2924:	a5 e4       	ldi	r26, 0x45	; 69
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e5 e4       	ldi	r30, 0x45	; 69
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	98 2f       	mov	r25, r24
    2930:	98 7f       	andi	r25, 0xF8	; 248
    2932:	e9 81       	ldd	r30, Y+1	; 0x01
    2934:	fa 81       	ldd	r31, Y+2	; 0x02
    2936:	86 81       	ldd	r24, Z+6	; 0x06
    2938:	89 2b       	or	r24, r25
    293a:	8c 93       	st	X, r24

	//Insert the required Compare Output mode through COM20:1 BITS
	//Enabled Interrupt for Overflow or Compare mode as required
	if ((Config_Ptr->Waveform_Generation)==Over_Flow)//Overflow mode
    293c:	e9 81       	ldd	r30, Y+1	; 0x01
    293e:	fa 81       	ldd	r31, Y+2	; 0x02
    2940:	85 81       	ldd	r24, Z+5	; 0x05
    2942:	88 23       	and	r24, r24
    2944:	b1 f4       	brne	.+44     	; 0x2972 <Timer2_init+0xe0>
	{
		CLEAR_BIT(TCCR2,COM20);
    2946:	a5 e4       	ldi	r26, 0x45	; 69
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e5 e4       	ldi	r30, 0x45	; 69
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	8f 7e       	andi	r24, 0xEF	; 239
    2952:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,COM21);
    2954:	a5 e4       	ldi	r26, 0x45	; 69
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e5 e4       	ldi	r30, 0x45	; 69
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8f 7d       	andi	r24, 0xDF	; 223
    2960:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE2);
    2962:	a9 e5       	ldi	r26, 0x59	; 89
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e9 e5       	ldi	r30, 0x59	; 89
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 64       	ori	r24, 0x40	; 64
    296e:	8c 93       	st	X, r24
    2970:	1a c0       	rjmp	.+52     	; 0x29a6 <Timer2_init+0x114>
	}
	else if ((Config_Ptr->Waveform_Generation)==Compare)//compare mode
    2972:	e9 81       	ldd	r30, Y+1	; 0x01
    2974:	fa 81       	ldd	r31, Y+2	; 0x02
    2976:	85 81       	ldd	r24, Z+5	; 0x05
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	a9 f4       	brne	.+42     	; 0x29a6 <Timer2_init+0x114>
	{
		CLEAR_BIT(TCCR2,COM20);
    297c:	a5 e4       	ldi	r26, 0x45	; 69
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e5 e4       	ldi	r30, 0x45	; 69
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	8f 7e       	andi	r24, 0xEF	; 239
    2988:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,COM21);
    298a:	a5 e4       	ldi	r26, 0x45	; 69
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e4       	ldi	r30, 0x45	; 69
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8f 7d       	andi	r24, 0xDF	; 223
    2996:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE2);
    2998:	a9 e5       	ldi	r26, 0x59	; 89
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e9 e5       	ldi	r30, 0x59	; 89
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	80 68       	ori	r24, 0x80	; 128
    29a4:	8c 93       	st	X, r24
	}
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer 2.
 */
void Timer2_setCallBack(void(*a_ptr)(void))
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <Timer2_setCallBack+0x6>
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	90 93 8e 01 	sts	0x018E, r25
    29c6:	80 93 8d 01 	sts	0x018D, r24
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <Timer2_diinit>:

/*
 * Description: Function to disable the Timer2 to stop the Timer Driver
 */
void Timer2_diinit(void)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0 ;
    29dc:	e4 e4       	ldi	r30, 0x44	; 68
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	10 82       	st	Z, r1
	OCR2 = 0 ;
    29e2:	e3 e4       	ldi	r30, 0x43	; 67
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	10 82       	st	Z, r1
	TCCR2 =0 ;
    29e8:	e5 e4       	ldi	r30, 0x45	; 69
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	10 82       	st	Z, r1
	TIMSK =0 ;
    29ee:	e9 e5       	ldi	r30, 0x59	; 89
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	10 82       	st	Z, r1
}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType *ptr_config)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <UART_init+0x6>
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <UART_init+0x8>
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	9c 83       	std	Y+4, r25	; 0x04
    2a08:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a0a:	1a 82       	std	Y+2, r1	; 0x02
    2a0c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a0e:	eb e2       	ldi	r30, 0x2B	; 43
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 * Insert the required number of data bits in the frame through UCSZ2 Bit
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a16:	ea e2       	ldi	r30, 0x2A	; 42
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	88 e1       	ldi	r24, 0x18	; 24
    2a1c:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | (((ptr_config->size)&0x04));
    2a1e:	aa e2       	ldi	r26, 0x2A	; 42
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	ea e2       	ldi	r30, 0x2A	; 42
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	98 2f       	mov	r25, r24
    2a2a:	9b 7f       	andi	r25, 0xFB	; 251
    2a2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a30:	84 81       	ldd	r24, Z+4	; 0x04
    2a32:	84 70       	andi	r24, 0x04	; 4
    2a34:	89 2b       	or	r24, r25
    2a36:	8c 93       	st	X, r24
	 * Insert the required mode of opeartion (Asynchronous/synchronous) through UMSEL bit
	 * Insert the required number of data bits in the frame through UCSZ1:0 Bits
	 * Insert the required Clock Polarity through UCPOL Bits

	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);
    2a38:	a0 e4       	ldi	r26, 0x40	; 64
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e0 e4       	ldi	r30, 0x40	; 64
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	80 68       	ori	r24, 0x80	; 128
    2a44:	8c 93       	st	X, r24
	//UCSRC |=(1<<UCSRC);
	UCSRC = (UCSRC & 0xBF)|((ptr_config->Mode)<<6);
    2a46:	a0 e4       	ldi	r26, 0x40	; 64
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e0 e4       	ldi	r30, 0x40	; 64
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	28 2f       	mov	r18, r24
    2a52:	2f 7b       	andi	r18, 0xBF	; 191
    2a54:	eb 81       	ldd	r30, Y+3	; 0x03
    2a56:	fc 81       	ldd	r31, Y+4	; 0x04
    2a58:	87 81       	ldd	r24, Z+7	; 0x07
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	00 24       	eor	r0, r0
    2a60:	96 95       	lsr	r25
    2a62:	87 95       	ror	r24
    2a64:	07 94       	ror	r0
    2a66:	96 95       	lsr	r25
    2a68:	87 95       	ror	r24
    2a6a:	07 94       	ror	r0
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	80 2d       	mov	r24, r0
    2a70:	82 2b       	or	r24, r18
    2a72:	8c 93       	st	X, r24
	UCSRC =	(UCSRC & 0xCF)|((ptr_config->Parity)<<4);
    2a74:	a0 e4       	ldi	r26, 0x40	; 64
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e0 e4       	ldi	r30, 0x40	; 64
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	28 2f       	mov	r18, r24
    2a80:	2f 7c       	andi	r18, 0xCF	; 207
    2a82:	eb 81       	ldd	r30, Y+3	; 0x03
    2a84:	fc 81       	ldd	r31, Y+4	; 0x04
    2a86:	85 81       	ldd	r24, Z+5	; 0x05
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	82 95       	swap	r24
    2a8e:	92 95       	swap	r25
    2a90:	90 7f       	andi	r25, 0xF0	; 240
    2a92:	98 27       	eor	r25, r24
    2a94:	80 7f       	andi	r24, 0xF0	; 240
    2a96:	98 27       	eor	r25, r24
    2a98:	82 2b       	or	r24, r18
    2a9a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7)|((ptr_config->Stop_bits)<<3);
    2a9c:	a0 e4       	ldi	r26, 0x40	; 64
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e0 e4       	ldi	r30, 0x40	; 64
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	27 7f       	andi	r18, 0xF7	; 247
    2aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2aac:	fc 81       	ldd	r31, Y+4	; 0x04
    2aae:	86 81       	ldd	r24, Z+6	; 0x06
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	82 2b       	or	r24, r18
    2ac2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9)|(((ptr_config->size)&0x03)<<1);
    2ac4:	a0 e4       	ldi	r26, 0x40	; 64
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e0 e4       	ldi	r30, 0x40	; 64
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	28 2f       	mov	r18, r24
    2ad0:	29 7f       	andi	r18, 0xF9	; 249
    2ad2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad6:	84 81       	ldd	r24, Z+4	; 0x04
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	83 70       	andi	r24, 0x03	; 3
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	82 2b       	or	r24, r18
    2ae6:	8c 93       	st	X, r24
	//UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);
	UCSRC = (UCSRC & 0xFE)|(ptr_config->Clock);
    2ae8:	a0 e4       	ldi	r26, 0x40	; 64
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e0 e4       	ldi	r30, 0x40	; 64
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	98 2f       	mov	r25, r24
    2af4:	9e 7f       	andi	r25, 0xFE	; 254
    2af6:	eb 81       	ldd	r30, Y+3	; 0x03
    2af8:	fc 81       	ldd	r31, Y+4	; 0x04
    2afa:	80 85       	ldd	r24, Z+8	; 0x08
    2afc:	89 2b       	or	r24, r25
    2afe:	8c 93       	st	X, r24



	/* Calculate the UBRR register value with required BaudRate*/
	ubrr_value = (uint16)(((F_cpu / ((ptr_config->Baud_Rate) * 8UL))) - 1);
    2b00:	eb 81       	ldd	r30, Y+3	; 0x03
    2b02:	fc 81       	ldd	r31, Y+4	; 0x04
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	a2 81       	ldd	r26, Z+2	; 0x02
    2b0a:	b3 81       	ldd	r27, Z+3	; 0x03
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	aa 1f       	adc	r26, r26
    2b12:	bb 1f       	adc	r27, r27
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	aa 1f       	adc	r26, r26
    2b1a:	bb 1f       	adc	r27, r27
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	aa 1f       	adc	r26, r26
    2b22:	bb 1f       	adc	r27, r27
    2b24:	9c 01       	movw	r18, r24
    2b26:	ad 01       	movw	r20, r26
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	92 e1       	ldi	r25, 0x12	; 18
    2b2c:	aa e7       	ldi	r26, 0x7A	; 122
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    2b38:	da 01       	movw	r26, r20
    2b3a:	c9 01       	movw	r24, r18
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b42:	e0 e4       	ldi	r30, 0x40	; 64
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	89 2f       	mov	r24, r25
    2b4c:	99 27       	eor	r25, r25
    2b4e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b50:	e9 e2       	ldi	r30, 0x29	; 41
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	80 83       	st	Z, r24
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	0f 92       	push	r0
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b72:	eb e2       	ldi	r30, 0x2B	; 43
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	80 72       	andi	r24, 0x20	; 32
    2b7e:	90 70       	andi	r25, 0x00	; 0
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	b9 f3       	breq	.-18     	; 0x2b72 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b84:	ec e2       	ldi	r30, 0x2C	; 44
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b9c:	eb e2       	ldi	r30, 0x2B	; 43
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 23       	and	r24, r24
    2ba4:	dc f7       	brge	.-10     	; 0x2b9c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2ba6:	ec e2       	ldi	r30, 0x2C	; 44
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
}
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <UART_sendString+0x6>
    2bb8:	0f 92       	push	r0
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	9b 83       	std	Y+3, r25	; 0x03
    2bc0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bc2:	19 82       	std	Y+1, r1	; 0x01
    2bc4:	0e c0       	rjmp	.+28     	; 0x2be2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	e2 0f       	add	r30, r18
    2bd4:	f3 1f       	adc	r31, r19
    2bd6:	80 81       	ld	r24, Z
    2bd8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <UART_sendByte>
		i++;
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	8f 5f       	subi	r24, 0xFF	; 255
    2be0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	9b 81       	ldd	r25, Y+3	; 0x03
    2bec:	fc 01       	movw	r30, r24
    2bee:	e2 0f       	add	r30, r18
    2bf0:	f3 1f       	adc	r31, r19
    2bf2:	80 81       	ld	r24, Z
    2bf4:	88 23       	and	r24, r24
    2bf6:	39 f7       	brne	.-50     	; 0x2bc6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <UART_receiveString+0xa>
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	9b 83       	std	Y+3, r25	; 0x03
    2c16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c18:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	8c 01       	movw	r16, r24
    2c26:	02 0f       	add	r16, r18
    2c28:	13 1f       	adc	r17, r19
    2c2a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    2c2e:	f8 01       	movw	r30, r16
    2c30:	80 83       	st	Z, r24
    2c32:	0f c0       	rjmp	.+30     	; 0x2c52 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	8f 5f       	subi	r24, 0xFF	; 255
    2c38:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	9b 81       	ldd	r25, Y+3	; 0x03
    2c44:	8c 01       	movw	r16, r24
    2c46:	02 0f       	add	r16, r18
    2c48:	13 1f       	adc	r17, r19
    2c4a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <UART_recieveByte>
    2c4e:	f8 01       	movw	r30, r16
    2c50:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e2 0f       	add	r30, r18
    2c60:	f3 1f       	adc	r31, r19
    2c62:	80 81       	ld	r24, Z
    2c64:	83 32       	cpi	r24, 0x23	; 35
    2c66:	31 f7       	brne	.-52     	; 0x2c34 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	fc 01       	movw	r30, r24
    2c74:	e2 0f       	add	r30, r18
    2c76:	f3 1f       	adc	r31, r19
    2c78:	10 82       	st	Z, r1
}
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	08 95       	ret

00002c8a <__udivmodsi4>:
    2c8a:	a1 e2       	ldi	r26, 0x21	; 33
    2c8c:	1a 2e       	mov	r1, r26
    2c8e:	aa 1b       	sub	r26, r26
    2c90:	bb 1b       	sub	r27, r27
    2c92:	fd 01       	movw	r30, r26
    2c94:	0d c0       	rjmp	.+26     	; 0x2cb0 <__udivmodsi4_ep>

00002c96 <__udivmodsi4_loop>:
    2c96:	aa 1f       	adc	r26, r26
    2c98:	bb 1f       	adc	r27, r27
    2c9a:	ee 1f       	adc	r30, r30
    2c9c:	ff 1f       	adc	r31, r31
    2c9e:	a2 17       	cp	r26, r18
    2ca0:	b3 07       	cpc	r27, r19
    2ca2:	e4 07       	cpc	r30, r20
    2ca4:	f5 07       	cpc	r31, r21
    2ca6:	20 f0       	brcs	.+8      	; 0x2cb0 <__udivmodsi4_ep>
    2ca8:	a2 1b       	sub	r26, r18
    2caa:	b3 0b       	sbc	r27, r19
    2cac:	e4 0b       	sbc	r30, r20
    2cae:	f5 0b       	sbc	r31, r21

00002cb0 <__udivmodsi4_ep>:
    2cb0:	66 1f       	adc	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	1a 94       	dec	r1
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <__udivmodsi4_loop>
    2cbc:	60 95       	com	r22
    2cbe:	70 95       	com	r23
    2cc0:	80 95       	com	r24
    2cc2:	90 95       	com	r25
    2cc4:	9b 01       	movw	r18, r22
    2cc6:	ac 01       	movw	r20, r24
    2cc8:	bd 01       	movw	r22, r26
    2cca:	cf 01       	movw	r24, r30
    2ccc:	08 95       	ret

00002cce <__prologue_saves__>:
    2cce:	2f 92       	push	r2
    2cd0:	3f 92       	push	r3
    2cd2:	4f 92       	push	r4
    2cd4:	5f 92       	push	r5
    2cd6:	6f 92       	push	r6
    2cd8:	7f 92       	push	r7
    2cda:	8f 92       	push	r8
    2cdc:	9f 92       	push	r9
    2cde:	af 92       	push	r10
    2ce0:	bf 92       	push	r11
    2ce2:	cf 92       	push	r12
    2ce4:	df 92       	push	r13
    2ce6:	ef 92       	push	r14
    2ce8:	ff 92       	push	r15
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	ca 1b       	sub	r28, r26
    2cf8:	db 0b       	sbc	r29, r27
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	09 94       	ijmp

00002d06 <__epilogue_restores__>:
    2d06:	2a 88       	ldd	r2, Y+18	; 0x12
    2d08:	39 88       	ldd	r3, Y+17	; 0x11
    2d0a:	48 88       	ldd	r4, Y+16	; 0x10
    2d0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d18:	b9 84       	ldd	r11, Y+9	; 0x09
    2d1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d1c:	df 80       	ldd	r13, Y+7	; 0x07
    2d1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d20:	fd 80       	ldd	r15, Y+5	; 0x05
    2d22:	0c 81       	ldd	r16, Y+4	; 0x04
    2d24:	1b 81       	ldd	r17, Y+3	; 0x03
    2d26:	aa 81       	ldd	r26, Y+2	; 0x02
    2d28:	b9 81       	ldd	r27, Y+1	; 0x01
    2d2a:	ce 0f       	add	r28, r30
    2d2c:	d1 1d       	adc	r29, r1
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	ed 01       	movw	r28, r26
    2d3a:	08 95       	ret

00002d3c <_exit>:
    2d3c:	f8 94       	cli

00002d3e <__stop_program>:
    2d3e:	ff cf       	rjmp	.-2      	; 0x2d3e <__stop_program>
